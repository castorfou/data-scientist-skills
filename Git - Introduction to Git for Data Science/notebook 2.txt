How can I view a specific commit?

	To view the details of a specific commit, you use the command git show with the first few characters of the commit's hash. For example, the command git show 0da2f7 produces this:

	commit 0da2f7ad11664ca9ed933c1ccd1f3cd24d481e42
	Author: Rep Loop <repl@datacamp.com>
	Date:   Wed Sep 5 15:39:18 2018 +0000

		Added year to report title.

	diff --git a/report.txt b/report.txt
	index e713b17..4c0742a 100644
	--- a/report.txt
	+++ b/report.txt
	@@ -1,4 +1,4 @@
	-# Seasonal Dental Surgeries 2017-18
	+# Seasonal Dental Surgeries (2017) 2017-18

	 TODO: write executive summary.

	The first part is the same as the log entry shown by git log. The second part shows the changes; as with git diff, lines that the change removed are prefixed with -, while lines that it added are prefixed with +.
	
What is Git's equivalent of a relative path?

	A hash is like an absolute path: it identifies a specific commit. Another way to identify a commit is to use the equivalent of a relative path. The special label HEAD, which we saw in the previous chapter, always refers to the most recent commit. The label HEAD~1 then refers to the commit before it, while HEAD~2 refers to the commit before that, and so on.

	Note that the symbol between HEAD and the number is a tilde ~, not a minus sign -, and that there cannot be spaces before or after the tilde.

git annotate - How can I see who changed what in a file?

	git log displays the overall history of a project or file, but Git can give even more information: the command git annotate file shows who made the last change to each line of a file and when. For example, the first three lines of output from git annotate report.txt look something like this:

	04307054        (  Rep Loop     2017-09-20 13:42:26 +0000       1)# Seasonal Dental Surgeries (2017) 2017-18
	5e6f92b6        (  Rep Loop     2017-09-20 13:42:26 +0000       2)
	5e6f92b6        (  Rep Loop     2017-09-20 13:42:26 +0000       3)TODO: write executive summary.

	Each line contains five things, with two to four in parentheses.

		The first eight digits of the hash, 04307054.
		The author, Rep Loop.
		The time of the commit, 2017-09-20 13:42:26 +0000.
		The line number, 1.
		The contents of the line, # Seasonal Dental Surgeries (2017) 2017-18.

git show - How can I see what changed between two commits?

	git show with a commit ID shows the changes made in a particular commit. To see the changes between two commits, you can use git diff ID1..ID2, where ID1 and ID2 identify the two commits you're interested in, and the connector .. is a pair of dots. For example, git diff abc123..def456 shows the differences between the commits abc123 and def456, while git diff HEAD~1..HEAD~3 shows the differences between the state of the repository one commit in the past and its state three commits in the past.

	You are in the dental repository. Use git diff to view the differences between its current state and its state two commits previously. Which of the following files have changed?

How do I add new files?

	Git does not track files by default. Instead, it waits until you have used git add at least once before it starts paying attention to a file.

	In the diagram you saw at the start of the chapter, the untracked files won't have a blob, and won't be listed in a tree.

	The untracked files won't benefit from version control, so to make sure you don't miss anything, git status will always tell you about files that are in your repository but aren't (yet) being tracked.

How do I tell Git to ignore certain files?

	Data analysis often produces temporary or intermediate files that you don't want to save. You can tell it to stop paying attention to files you don't care about by creating a file in the root directory of your repository called .gitignore and storing a list of wildcard patterns that specify the files you don't want Git to pay attention to. For example, if .gitignore contains:

	build
	*.mpl

	then Git will ignore any file or directory called build (and, if it's a directory, anything in it), as well as any file whose name ends in .mpl.

git clean - How can I remove unwanted files?

	Git can help you clean up files that you have told it you don't want. The command git clean -n will show you a list of files that are in the repository, but whose history Git is not currently tracking. A similar command git clean -f will then delete those files.

	Use this command carefully: git clean only works on untracked files, so by definition, their history has not been saved. If you delete them with git clean -f, they're gone for good.

git config - How can I see how Git is configured?

	Like most complex pieces of software, Git allows you to change its default settings. To see what the settings are, you can use the command git config --list with one of three additional options:

		--system: settings for every user on this computer.
		--global: settings for every one of your projects.
		--local: settings for one specific project.

	Each level overrides the one above it, so local settings (per-project) take precedence over global settings (per-user), which in turn take precedence over system settings (for all users on the computer).

How can I change my Git configuration?

	Most of Git's settings should be left as they are. However, there are two you should set on every computer you use: your name and your email address. These are recorded in the log every time you commit a change, and are often used to identify the authors of a project's content in order to give credit (or assign blame, depending on the circumstances).

	To change a configuration value for all of your projects on a particular computer, run the command:

	git config --global setting.name setting.value

	with the setting's name and value in the appropriate places. The keys that identify your name and email address are user.name and user.email respectively.	
	