Graph properties
	import networkx as nx
	G = nx.erdos_renyi_graph(n=20, p=0.2)
	len(G.edges())
		Out[3]: 29
	len(G.nodes())
		Out[4]: 20
	nx.degree_centrality(G)
		Out[5]:
			{0: 0.15789473684210525,
			1: 0.15789473684210525,
			2: 0.15789473684210525,
			3: 0.10526315789473684,...
	nx.betweenness_centrality(G)
		Out[6]:
			{0: 0.01949317738791423,
			1: 0.060916179337231965,
			2: 0.1276803118908382,
			3: 0.03313840155945419,...

Exercise - Characterizing the network (I)

To start out, let's do some basic characterization of the network, by looking at the number of nodes and number of edges in a network. It has been pre-loaded as G and is available for exploration in the IPython Shell. Your job in this exercise is to identify how many nodes and edges are present in the network. You can use the functions len(G.nodes()) and len(G.edges()) to calculate the number of nodes and edges respectively.

Exercise - Characterizing the network (II)

Let's continue recalling what you've learned before about node importances, by plotting the degree distribution of a network. This is the distribution of node degrees computed across all nodes in a network.

		# Import necessary modules
		import matplotlib.pyplot as plt
		import networkx as nx

		# Plot the degree distribution of the GitHub collaboration network
		plt.hist(list(nx.degree_centrality(G).values()))
		plt.show()
		
Exercise - Characterizing the network (III)

The last exercise was on degree centrality; this time round, let's recall betweenness centrality!

A small note: if executed correctly, this exercise may need about 5 seconds to execute.

		# Import necessary modules
		import matplotlib.pyplot as plt
		import networkx as nx

		# Plot the degree distribution of the GitHub collaboration network
		plt.hist(list(nx.betweenness_centrality(G).values()))
		plt.show()		
		
nxviz API
	import networkx as nx
	import nxviz as nv
	G = nx.erdos_renyi_graph(n=20, p=0.3)
	circ = nv.CircosPlot(G, node_color='key',node_group='key')
	circ.draw()

NetworkX API
	import networkx as nx
	G = nx.erdos_renyi_graph(n=100, p=0.03)
	nx.connected_component_subgraphs(G)
		Out[3]: <generator object connected_component_subgraphs at
		0x10cb2c990>
	list(nx.connected_component_subgraphs(G))
		Out[4]:
		[<networkx.classes.graph.Graph at 0x10ca24588>,
		<networkx.classes.graph.Graph at 0x10ca244e0>]
	for g in list(nx.connected_component_subgraphs(G)): print(len(g.nodes()))
		Out[5]: 99
			...: 1

Exercise - MatrixPlot

Let's now practice making some visualizations. The first one will be the MatrixPlot. In a MatrixPlot, the matrix is the representation of the edges.

		# Import necessary modules
		from nxviz import MatrixPlot
		import matplotlib.pyplot as plt

		# Calculate the largest connected component subgraph: largest_ccs
		largest_ccs = sorted(nx.connected_component_subgraphs(G), key=lambda x: len(x))[-1]

		# Create the customized MatrixPlot object: h
		h = MatrixPlot(graph=largest_ccs, node_grouping='grouping')

		# Draw the MatrixPlot to the screen
		h.draw()
		plt.show()
		
Great work! Recall that in a MatrixPlot, nodes are the rows and columns of the matrix, and cells are filled in according to whether an edge exists between the pairs of nodes.

Exercise - ArcPlot

Next up, let's use the ArcPlot to visualize the network. You're going to practice sorting the nodes in the graph as well.

Note: this exercise may take about 4-7 seconds to execute if done correctly.

		# Import necessary modules
		from nxviz.plots import ArcPlot
		import matplotlib.pyplot as plt

		# Iterate over all the nodes in G, including the metadata
		for n, d in G.nodes(data=True):

			# Calculate the degree of each node: G.node[n]['degree']
			G.node[n]['degree'] = nx.degree(G,n)

		# Create the ArcPlot object: a
		a = ArcPlot(G, node_order='degree')

		# Draw the ArcPlot to the screen
		a.draw()
		plt.show()
		
Excellent! You'll now transform this ArcPlot into a CircosPlot in the next exercise.

Exercise - CircosPlot

Finally, you're going to make a CircosPlot of the network!

		# Import necessary modules
		from nxviz import CircosPlot
		import matplotlib.pyplot as plt

		# Iterate over all the nodes, including the metadata
		for n, d in G.nodes(data=True):

			# Calculate the degree of each node: G.node[n]['degree']
			G.node[n]['degree'] = nx.degree(G,n)

		# Create the CircosPlot object: c
		c = CircosPlot(G, node_order='degree', node_grouping='grouping', node_color='grouping')

		# Draw the CircosPlot object to the screen
		c.draw()
		plt.show()
		
Fantastic! This CircosPlot provides a compact alternative to the ArcPlot. It is easy to see in this plot that most users belong to one group.		

Finding cliques
	import networkx as nx
	G = nx.erdos_renyi_graph(n=100, p=0.15)
	nx.find_cliques(G)
		Out[3]: <generator object find_cliques at 0x10ca8bca8>
	for clique in nx.find_cliques(G): print(len(clique))
	
Exercise - Finding cliques (I)

You're now going to practice finding cliques in G. Recall that cliques are "groups of nodes that are fully connected to one another", while a maximal clique is a clique that cannot be extended by adding another node in the graph.

		# Calculate the maximal cliques in G: cliques
		cliques = nx.find_cliques(G)

		# Count and print the number of maximal cliques in G
		print(len(list(cliques)))
		
Fantastic! This Github network has 19 maximal cliques.

Exercise - Finding cliques (II)

Great work! Let's continue by finding a particular maximal clique, and then plotting that clique.

		# Import necessary modules
		import networkx as nx
		from nxviz import CircosPlot
		import matplotlib.pyplot as plt

		# Find the author(s) that are part of the largest maximal clique: largest_clique
		largest_clique = sorted(nx.find_cliques(G), key=lambda x:len(x))[-1]

		# Create the subgraph of the largest_clique: G_lc
		G_lc = G.subgraph(largest_clique)

		# Create the CircosPlot object: c
		c = CircosPlot(G_lc)

		# Draw the CircosPlot to the screen
		c.draw()
		plt.show()
		
Great work! The subgraph consisting of the largest maximal clique has 14 users. It's time to move on towards building the recommendation system!

Exercise - Finding important collaborators

Almost there! You'll now look at important nodes once more. Here, you'll make use of the degree_centrality() and betweenness_centrality() functions in NetworkX to compute each of the respective centrality scores, and then use that information to find the "important nodes". In other words, your job in this exercise is to find the user(s) that have collaborated with the most number of users.

		# Compute the degree centralities of G: deg_cent
		deg_cent = nx.degree_centrality(G)

		# Compute the maximum degree centrality: max_dc
		max_dc = max(deg_cent.values())

		# Find the user(s) that have collaborated the most: prolific_collaborators
		prolific_collaborators = [n for n, dc in deg_cent.items() if dc == max_dc]

		# Print the most prolific collaborator(s)
		print(prolific_collaborators)

Great work! It looks like 'u741' is the most prolific collaborator.

Exercise - Characterizing editing communities

You're now going to combine what you've learned about the BFS algorithm and concept of maximal cliques to visualize the network with an ArcPlot.

The largest maximal clique in the Github user collaboration network has been assigned to the subgraph G_lmc. Note that for NetworkX version 2.x and later, G.subgraph(nodelist) returns only an immutable view on the original graph. We must explicitly ask for a .copy() of the graph to obtain a mutatable version.

		# Import necessary modules
		from nxviz import ArcPlot
		import matplotlib.pyplot as plt

		# Identify the largest maximal clique: largest_max_clique
		largest_max_clique = set(sorted(nx.find_cliques(G), key=lambda x: len(x))[-1])

		# Create a subgraph from the largest_max_clique: G_lmc
		G_lmc = G.subgraph(largest_max_clique).copy()  

		# Go out 1 degree of separation
		for node in list(G_lmc.nodes()):
			G_lmc.add_nodes_from(G.neighbors(node))
			G_lmc.add_edges_from(zip([node]*len(list(G.neighbors(node))), G.neighbors(node)))

		# Record each node's degree centrality score
		for n in G_lmc.nodes():
			G_lmc.node[n]['degree centrality'] = nx.degree_centrality(G_lmc)[n]

		# Create the ArcPlot object: a
		a = ArcPlot(G_lmc, node_order='degree centrality')

		# Draw the ArcPlot to the screen
		a.draw()
		plt.show()

Great work! The final step that remains is to recommend collaborators who have not yet collaborated together.

Exercise - Recommending co-editors who have yet to edit together

Finally, you're going to leverage the concept of open triangles to recommend users on GitHub to collaborate!

		# Import necessary modules
		from itertools import combinations
		from collections import defaultdict

		# Initialize the defaultdict: recommended
		recommended = defaultdict(int)

		# Iterate over all the nodes in G
		for n, d in G.nodes(data=True):

			# Iterate over all possible triangle relationship combinations
			for n1, n2 in combinations(G.neighbors(n), 2):

				# Check whether n1 and n2 do not have an edge
				if not G.has_edge(n1, n2):

					# Increment recommended
					recommended[(n1, n2)] += 1

		# Identify the top 10 pairs of users
		all_counts = sorted(recommended.values())
		top10_pairs = [pair for pair, count in recommended.items() if count > all_counts[-10]]
		print(top10_pairs)

<script.py> output:
    [('u2022', 'u4159'), ('u655', 'u2022')]
	
	
Fantastic job! You've identified pairs of users who should collaborate together, and in doing so, built your very own recommendation system!



