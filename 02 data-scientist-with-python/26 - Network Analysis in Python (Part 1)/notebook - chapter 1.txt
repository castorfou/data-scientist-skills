NetworkX API basics
	import networkx as nx
	G = nx.Graph()
	G.add_nodes_from([1, 2, 3])
	G.nodes()
		Out[5]: [1, 2, 3]
	G.add_edge(1, 2)
	G.edges()
		Out[7]: [(1, 2)]
	G.node[1]['label'] = 'blue'
	G.nodes(data=True)
		Out[9]: [(1, {'label': 'blue'}), (2, {}), (3, {})]
	nx.draw(G)
	import matplotlib.pyplot as plt
	plt.show()	

	
Exercise - 	Basics of NetworkX API, using Twitter network

To get you up and running with the NetworkX API, we will run through some basic functions that let you query a Twitter network that has been pre-loaded for you and is available in the IPython Shell as T. The Twitter network comes from KONECT, and shows a snapshot of a subset of Twitter users. It is an anonymized Twitter network with metadata.

You're now going to use the NetworkX API to explore some basic properties of the network, and are encouraged to experiment with the data in the IPython Shell.

Wait for the IPython shell to indicate that the graph that has been preloaded under the variable name T (representing a Twitter network), and then answer the following question:

What is the size of the graph T, the type of T.nodes(), and the data structure of the third element of the last edge listed in T.edges(data=True)? The len() and type() functions will be useful here. To access the last entry of T.edges(data=True), you can use list(T.edges(data=True))[-1].

		In [4]: len(T.nodes())
		Out[4]: 23369
		In [6]: list(T.edges(data=True))[-1]
		Out[6]: (23324, 23336, {'date': datetime.date(2010, 9, 20)})
		In [8]: print(type(T.nodes()))
		<class 'networkx.classes.reportviews.NodeView'>
		In [9]: type(list(T.edges(data=True))[2])
		Out[9]: tuple
		In [17]: type(list(T.edges(data=True))[-1][2])
		Out[17]: dict
		
Exercise - Basic drawing of a network using NetworkX

NetworkX provides some basic drawing functionality that works for small graphs. We have selected a subset of nodes from the graph for you to practice using NetworkX's drawing facilities. It has been pre-loaded as T_sub.

		# Import necessary modules
		import matplotlib.pyplot as plt
		import networkx as nx

		# Draw the graph to screen
		nx.draw(T_sub)
		plt.show()
		
Exercise - 	Queries on a graph

Now that you know some basic properties of the graph and have practiced using NetworkX's drawing facilities to visualize components of it, it's time to explore how you can query it for nodes and edges. Specifically, you're going to look for "nodes of interest" and "edges of interest". To achieve this, you'll make use of the .nodes() and .edges() methods that Eric went over in the video. The .nodes() method returns a list of nodes, while the .edges() method returns a list of tuples, in which each tuple shows the nodes that are present on that edge. Recall that passing in the keyword argument data=True in these methods retrieves the corresponding metadata associated with the nodes and edges as well.

You'll write list comprehensions to effectively build these queries in one line. For a refresher on list comprehensions, refer to Part 2 of DataCamp's Python Data Science Toolbox course. Here's the recipe for a list comprehension:
[ output expression for iterator variable in iterable if predicate expression ].

You have to fill in the _iterable_ and the _predicate expression_. Feel free to prototype your answer by exploring the graph in the IPython Shell before submitting your solution.

		# Use a list comprehension to get the nodes of interest: noi
		noi = [n for n, d in T.nodes(data=True) if d['occupation'] == 'scientist']

		# Use a list comprehension to get the edges of interest: eoi
		eoi = [(u, v) for u, v, d in T.edges(data=True) if d['date'] < date(2010,1,1)]

		
Undirected graphs
import networkx as nx
G = nx.Graph()
type(G)
	Out[3]: networkx.classes.graph.Graph

Directed graphs
D = nx.DiGraph()
type(D)
	Out[5]: networkx.classes.digraph.DiGraph

	
Multi-edge (Directed) graphs
	M = nx.MultiGraph()
	type(M)
		Out[7]: networkx.classes.multigraph.MultiGraph
	MD = nx.MultiDiGraph()
	type(MD)
		Out[9]: networkx.classes.multidigraph.MultiDiGraph

Exercise - Specifying a weight on edges

Weights can be added to edges in a graph, typically indicating the "strength" of an edge. In NetworkX, the weight is indicated by the 'weight' key in the metadata dictionary.

Before attempting the exercise, use the IPython Shell to access the dictionary metadata of T and explore it, for instance by running the commands T.edges[1, 10] and then T.edges[10, 1]. Note how there's only one field, and now you're going to add another field, called 'weight'.

		# Set the weight of the edge
		T.edges[1,10]['weight'] = 2

		# Iterate over all the edges (with metadata)
		for u, v, d in T.edges(data=True):

			# Check if node 293 is involved
			if 293 in [u, v]:

				# Set the weight to 1.1
				T.edges[u, v]['weight'] = 1.1

Exercise - Checking whether there are self-loops in the graph

As Eric discussed, NetworkX also allows edges that begin and end on the same node; while this would be non-intuitive for a social network graph, it is useful to model data such as trip networks, in which individuals begin at one location and end in another.

It is useful to check for this before proceeding with further analyses, and NetworkX graphs provide a method for this purpose: .number_of_selfloops().

In this exercise as well as later ones, you'll find the assert statement useful. An assert-ions checks whether the statement placed after it evaluates to True, otherwise it will throw an AssertionError.

To begin, use the .number_of_selfloops() method on T in the IPython Shell to get the number of edges that begin and end on the same node. A number of self-loops have been synthetically added to the graph. Your job in this exercise is to write a function that returns these edges.

# Define find_selfloop_nodes()
def find_selfloop_nodes(G):
    """
    Finds all nodes that have self-loops in the graph G.
    """
    nodes_in_selfloops = []

    # Iterate over all the edges of G
    for u, v in G.edges():

    # Check if node u and node v are the same
        if u == v:

            # Append node u to nodes_in_selfloops
            nodes_in_selfloops.append(u)

    return nodes_in_selfloops

# Check whether number of self loops equals the number of nodes in self loops
assert T.number_of_selfloops() == len(find_selfloop_nodes(T))
				
nxviz API
	import nxviz as nv
	import matplotlib.pyplot as plt
	ap = nv.ArcPlot(G)
	ap.draw()
	plt.show()		
	
Exercise - 	Visualizing using Matrix plots

It is time to try your first "fancy" graph visualization method: a matrix plot. To do this, nxviz provides a MatrixPlot object.

nxviz is a package for visualizing graphs in a rational fashion. Under the hood, the MatrixPlot utilizes nx.to_numpy_matrix(G), which returns the matrix form of the graph. Here, each node is one column and one row, and an edge between the two nodes is indicated by the value 1. In doing so, however, only the weight metadata is preserved; all other metadata is lost, as you'll verify using an assert statement.

A corresponding nx.from_numpy_matrix(A) allows one to quickly create a graph from a NumPy matrix. The default graph type is Graph(); if you want to make it a DiGraph(), that has to be specified using the create_using keyword argument, e.g. (nx.from_numpy_matrix(A, create_using=nx.DiGraph)).

One final note, matplotlib.pyplot and networkx have already been imported as plt and nx, respectively, and the graph T has been pre-loaded. For simplicity and speed, we have sub-sampled only 100 edges from the network.

		# Import nxviz
		import nxviz as nv

		# Create the MatrixPlot object: m
		m = nv.MatrixPlot(T)

		# Draw m to the screen
		m.draw()

		# Display the plot
		plt.show()

		# Convert T to a matrix format: A
		A = nx.to_numpy_matrix(T)

		# Convert A back to the NetworkX form as a directed graph: T_conv
		T_conv = nx.from_numpy_matrix(A, create_using=nx.DiGraph())

		# Check that the `category` metadata field is lost from each node
		for n, d in T_conv.nodes(data=True):
			assert 'category' not in d.keys()
			
			
Exercise - Visualizing using Circos plots

Circos plots are a rational, non-cluttered way of visualizing graph data, in which nodes are ordered around the circumference in some fashion, and the edges are drawn within the circle that results, giving a beautiful as well as informative visualization about the structure of the network.

In this exercise, you'll continue getting practice with the nxviz API, this time with the CircosPlot object. matplotlib.pyplot has been imported for you as plt.

		# Import necessary modules
		import matplotlib.pyplot as plt
		from nxviz import CircosPlot

		# Create the CircosPlot object: c
		c = CircosPlot(T)

		# Draw c to the screen
		c.draw()

		# Display the plot
		plt.show()
		
Exercise - Visualizing using Arc plots

Following on what you've learned about the nxviz API, now try making an ArcPlot of the network. Two keyword arguments that you will try here are node_order='keyX' and node_color='keyX', in which you specify a key in the node metadata dictionary to color and order the nodes by.

matplotlib.pyplot has been imported for you as plt.

		# Import necessary modules
		import matplotlib.pyplot as plt
		from nxviz import ArcPlot

		# Create the un-customized ArcPlot object: a
		a = ArcPlot(T)

		# Draw a to the screen
		a.draw()

		# Display the plot
		plt.show()

		# Create the customized ArcPlot object: a2
		a2 = ArcPlot(T, node_order='category', node_color='category')

		# Draw a2 to the screen
		a2.draw()

		# Display the plot
		plt.show()
