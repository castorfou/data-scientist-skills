Splitting the data
	data_to_train = df[NUMERIC_COLUMNS].fillna(-1000)
	labels_to_use = pd.get_dummies(df[LABELS])
	X_train, X_test, y_train, y_test = multilabel_train_test_split(data_to_train, labels_to_use,size=0.2, seed=123)

Training the model
	from sklearn.linear_model import LogisticRegression
	from sklearn.multiclass import OneVsRestClassifier
	clf = OneVsRestClassifier(LogisticRegression())
	clf.fit(X_train, y_train)
	
OneVsRestClassifier:
? Treats each column of y independently
? Fits a separate classifier for each of the columns

Exercise - Setting up a train-test split in scikit-learn

Alright, you've been patient and awesome. It's finally time to start training models!

The first step is to split the data into a training set and a test set. Some labels don't occur very often, but we want to make sure that they appear in both the training and the test sets. We provide a function that will make sure at least min_count examples of each label appear in each split: multilabel_train_test_split.

Feel free to check out the full code for multilabel_train_test_split here.

You'll start with a simple model that uses just the numeric columns of your DataFrame when calling multilabel_train_test_split. The data has been read into a DataFrame df and a list consisting of just the numeric columns is available as NUMERIC_COLUMNS.

		# Create the new DataFrame: numeric_data_only
		numeric_data_only = df[NUMERIC_COLUMNS].fillna(-1000)

		# Get labels and convert to dummy variables: label_dummies
		label_dummies = pd.get_dummies(df[LABELS])

		# Create training and test sets
		X_train, X_test, y_train, y_test = multilabel_train_test_split(numeric_data_only,
																	   label_dummies,
																	   size=0.2, 
																	   seed=123)

		# Print the info
		print("X_train info:")
		print(X_train.info())
		print("\nX_test info:")  
		print(X_test.info())
		print("\ny_train info:")  
		print(y_train.info())
		print("\ny_test info:")  
		print(y_test.info()) 
		
Exercise - Training a model

With split data in hand, you're only a few lines away from training a model.

In this exercise, you will import the logistic regression and one versus rest classifiers in order to fit a multi-class logistic regression model to the NUMERIC_COLUMNS of your feature data.

Then you'll test and print the accuracy with the .score() method to see the results of training.

Before you train! Remember, we're ultimately going to be using logloss to score our model, so don't worry too much about the accuracy here. Keep in mind that you're throwing away all of the text data in the dataset - that's by far most of the data! So don't get your hopes up for a killer performance just yet. We're just interested in getting things up and running at the moment.

All data necessary to call multilabel_train_test_split() has been loaded into the workspace.

		# Import classifiers
		from sklearn.linear_model import LogisticRegression
		from sklearn.multiclass import OneVsRestClassifier

		# Create the DataFrame: numeric_data_only
		numeric_data_only = df[NUMERIC_COLUMNS].fillna(-1000)

		# Get labels and convert to dummy variables: label_dummies
		label_dummies = pd.get_dummies(df[LABELS])

		# Create training and test sets
		X_train, X_test, y_train, y_test = multilabel_train_test_split(numeric_data_only,
																	   label_dummies,
																	   size=0.2, 
																	   seed=123)

		# Instantiate the classifier: clf
		clf = OneVsRestClassifier(LogisticRegression())

		# Fit the classifier to the training data
		clf.fit(X_train, y_train)

		# Print the accuracy
		print("Accuracy: {}".format(clf.score(X_test, y_test)))

<script.py> output:
    Accuracy: 0.0
	
Ok! The good news is that your workflow didn't cause any errors. The bad news is that your model scored the lowest possible accuracy: 0.0! But hey, you just threw away ALL of the text data in the budget. Later, you won't. Before you add the text data, let's see how the model does when scored by log loss.

Format and submit predictions

	In [4]: prediction_df = pd.DataFrame(columns=pd.get_dummies(df[LABELS],
	...: prefix_sep='__').columns,
	...: index=holdout.index,
	...: data=predictions)
	In [5]: prediction_df.to_csv('predictions.csv')
	In [6]: score = score_submission(pred_path='predictions.csv')

Exercise - Use your model to predict values on holdout data

You're ready to make some predictions! Remember, the train-test-split you've carried out so far is for model development. The original competition provides an additional test set, for which you'll never actually see the correct labels. This is called the "holdout data."

The point of the holdout data is to provide a fair test for machine learning competitions. If the labels aren't known by anyone but DataCamp, DrivenData, or whoever is hosting the competition, you can be sure that no one submits a mere copy of labels to artificially pump up the performance on their model.

Remember that the original goal is to predict the probability of each label. In this exercise you'll do just that by using the .predict_proba() method on your trained model.

First, however, you'll need to load the holdout data, which is available in the workspace as the file HoldoutData.csv.

		# Instantiate the classifier: clf
		clf = OneVsRestClassifier(LogisticRegression())

		# Fit it to the training data
		clf.fit(X_train, y_train)

		# Load the holdout data: holdout
		holdout = pd.read_csv('HoldoutData.csv', index_col=0)

		# Generate predictions: predictions
		predictions = clf.predict_proba(holdout[NUMERIC_COLUMNS].fillna(-1000))
		
Exercise - Writing out your results to a csv for submission

At last, you're ready to submit some predictions for scoring. In this exercise, you'll write your predictions to a .csv using the .to_csv() method on a pandas DataFrame. Then you'll evaluate your performance according to the LogLoss metric discussed earlier!

You'll need to make sure your submission obeys the correct format.

To do this, you'll use your predictions values to create a new DataFrame, prediction_df.

Interpreting LogLoss & Beating the Benchmark:

When interpreting your log loss score, keep in mind that the score will change based on the number of samples tested. To get a sense of how this very basic model performs, compare your score to the DrivenData benchmark model performance: 2.0455, which merely submitted uniform probabilities for each class.

Remember, the lower the log loss the better. Is your model's log loss lower than 2.0455?

		# Generate predictions: predictions
		predictions = clf.predict_proba(holdout[NUMERIC_COLUMNS].fillna(-1000))

		# Format predictions in DataFrame: prediction_df
		prediction_df = pd.DataFrame(columns=pd.get_dummies(df[LABELS]).columns,
									 index=holdout.index,
									 data=predictions)


		# Save prediction_df to csv
		prediction_df.to_csv('predictions.csv')

		# Submit the predictions for scoring: score
		score = score_submission('predictions.csv')

		# Print score
		print('Your model, trained with numeric data only, yields logloss score: {}'.format(score))

<script.py> output:
    Your model, trained with numeric data only, yields logloss score: 1.9067227623381413
	
Incredible! Even though your basic model scored 0.0 accuracy, it nevertheless performs better than the benchmark score of 2.0455. You've now got the basics down and have made a first pass at this complicated supervised learning problem. It's time to step up your game and incorporate the text data.


Using CountVectorizer() on column of main dataset
	from sklearn.feature_extraction.text import CountVectorizer
	TOKENS_BASIC = '\\S+(?=\\s+)'
	df.Program_Description.fillna('', inplace=True)
	vec_basic = CountVectorizer(token_pattern=TOKENS_BASIC)
	vec_basic.fit(df.Program_Description)
		Out[5]:
			CountVectorizer(analyzer='word', binary=False, decode_error='strict',dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',lowercase=True, max_df=1.0, max_features=None, min_df=1,ngram_range=(1, 1), preprocessor=None, stop_words=None,strip_accents=None, token_pattern='\\S+(?=\\s+)',tokenizer=None, vocabulary=None)
	msg = 'There are {} tokens in Program_Description if tokens are any non-whitespace'
	print(msg.format(len(vec_basic.get_feature_names())))
		There are 157 tokens in Program_Description if tokens are any nonwhitespace
	
	
Exercise - Creating a bag-of-words in scikit-learn

In this exercise, you'll study the effects of tokenizing in different ways by comparing the bag-of-words representations resulting from different token patterns.

You will focus on one feature only, the Position_Extra column, which describes any additional information not captured by the Position_Type label.

For example, in the Shell you can check out the budget item in row 8960 of the data using df.loc[8960]. Looking at the output reveals that this Object_Description is overtime pay. For who? The Position Type is merely "other", but the Position Extra elaborates: "BUS DRIVER". Explore the column further to see more instances. It has a lot of NaN values.

Your task is to turn the raw text in this column into a bag-of-words representation by creating tokens that contain only alphanumeric characters.

For comparison purposes, the first 15 tokens of vec_basic, which splits df.Position_Extra into tokens when it encounters only whitespace characters, have been printed along with the length of the representation.

		# Import CountVectorizer
		from sklearn.feature_extraction.text import CountVectorizer

		# Create the token pattern: TOKENS_ALPHANUMERIC
		TOKENS_ALPHANUMERIC = '[A-Za-z0-9]+(?=\\s+)'

		# Fill missing values in df.Position_Extra
		df.Position_Extra.fillna('', inplace=True)

		# Instantiate the CountVectorizer: vec_alphanumeric
		vec_alphanumeric = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC)

		# Fit to the data
		vec_alphanumeric.fit(df.Position_Extra)

		# Print the number of tokens and first 15 tokens
		msg = "There are {} tokens in Position_Extra if we split on non-alpha numeric"
		print(msg.format(len(vec_alphanumeric.get_feature_names())))
		print(vec_alphanumeric.get_feature_names()[:15])

<script.py> output:
    There are 123 tokens in Position_Extra if we split on non-alpha numeric
    ['1st', '2nd', '3rd', 'a', 'ab', 'additional', 'adm', 'administrative', 'and', 'any', 'art', 'assessment', 'assistant', 'asst', 'athletic']

Great work! Treating only alpha-numeric characters as tokens gives you a smaller number of more meaningful tokens. You've got bag-of-words in the bag!

Exercise - Combining text columns for tokenization

In order to get a bag-of-words representation for all of the text data in our DataFrame, you must first convert the text data in each row of the DataFrame into a single string.

In the previous exercise, this wasn't necessary because you only looked at one column of data, so each row was already just a single string. CountVectorizer expects each row to just be a single string, so in order to use all of the text columns, you'll need a method to turn a list of strings into a single string.

In this exercise, you'll complete the function definition combine_text_columns(). When completed, this function will convert all training text data in your DataFrame to a single string per row that can be passed to the vectorizer object and made into a bag-of-words using the .fit_transform() method.

Note that the function uses NUMERIC_COLUMNS and LABELS to determine which columns to drop. These lists have been loaded into the workspace.

		# Define combine_text_columns()
		def combine_text_columns(data_frame, to_drop=NUMERIC_COLUMNS + LABELS):
			""" converts all text in each row of data_frame to single vector """
			
			# Drop non-text columns that are in the df
			to_drop = set(to_drop) & set(data_frame.columns.tolist())
			text_data = data_frame.drop(to_drop,axis=1)
			
			# Replace nans with blanks
			text_data.fillna("",inplace=True)
			
			# Join all text items in a row that have a space in between
			return text_data.apply(lambda x: " ".join(x), axis=1)	
	

Exercise - What's in a token?

Now you will use combine_text_columns to convert all training text data in your DataFrame to a single vector that can be passed to the vectorizer object and made into a bag-of-words using the .fit_transform() method.

You'll compare the effect of tokenizing using any non-whitespace characters as a token and using only alphanumeric characters as a token.

		# Import the CountVectorizer
		from sklearn.feature_extraction.text import CountVectorizer

		# Create the basic token pattern
		TOKENS_BASIC = '\\S+(?=\\s+)'

		# Create the alphanumeric token pattern
		TOKENS_ALPHANUMERIC = '[A-Za-z0-9]+(?=\\s+)'

		# Instantiate basic CountVectorizer: vec_basic
		vec_basic = CountVectorizer(token_pattern=TOKENS_BASIC)

		# Instantiate alphanumeric CountVectorizer: vec_alphanumeric
		vec_alphanumeric = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC)

		# Create the text vector
		text_vector = combine_text_columns(df)

		# Fit and transform vec_basic
		vec_basic.fit_transform(text_vector)

		# Print number of tokens of vec_basic
		print("There are {} tokens in the dataset".format(len(vec_basic.get_feature_names())))

		# Fit and transform vec_alphanumeric
		vec_alphanumeric.fit_transform(text_vector)


		# Print number of tokens of vec_alphanumeric
		print("There are {} alpha-numeric tokens in the dataset".format(len(vec_alphanumeric.get_feature_names())))

<script.py> output:
    There are 1405 tokens in the dataset
    There are 1117 alpha-numeric tokens in the dataset
	
Wow, you're on your way to complete Data Domination! Notice that tokenizing on alpha-numeric tokens reduced the number of tokens, just as in the last exercise. We'll keep this in mind when building a better model with the Pipeline object next. See you in the next chapter!	
