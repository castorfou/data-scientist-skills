import
	from bokeh.io import ouput_file, show
	from bokeh.plotting import figure
	
circle	
	plot = figure(plot_width=400, tools='pan,box_zoom')
	plot.circle([1,2,3,4,5], [8,6,5,2,3])
	output_file('circle.html')
	show(plot)

other usage
	plot = figure()
	plot.circle(x=10, y=[2,5,8,12], size=[10,20,30,40])
	
different markers
	asterisk()
	circle()
	circle_cross()
	circle_x()
	cross()
	diamond()
	diamond_cross()
	inverted_triangle()
	square()
	square_cross()
	square_x()
	triangle()
	x()
	
exercise #1 - A simple scatter plot
		# Import figure from bokeh.plotting
		from bokeh.plotting import figure
		# Import output_file and show from bokeh.io
		from bokeh.io import output_file, show
		# Create the figure: p
		p = figure(x_axis_label='fertility (children per woman)', y_axis_label='female_literacy (% population)')
		# Add a circle glyph to the figure p
		p.circle(female_literacy, fertility)
		# Call the output_file() function and specify the name of the file
		output_file('fert_lit.html')
		# Display the plot
		show(p)

exercice #4 - lines	and markers
		# Import figure from bokeh.plotting
		from bokeh.plotting import figure

		# Create a figure with x_axis_type='datetime': p
		p = figure(x_axis_type='datetime', x_axis_label='Date', y_axis_label='US Dollars')

		# Plot date along the x-axis and price along the y-axis
		p.line(date,price)

		# With date on the x-axis and price on the y-axis, add a white circle glyph of size 4
		p.circle(date, price, fill_color='white', size=4)

		# Specify the name of the output file and show the result
		output_file('line.html')
		show(p)

exercise #5 - Patches
		# Create a list of az_lons, co_lons, nm_lons and ut_lons: x
		x = [az_lons, co_lons, nm_lons, ut_lons]

		# Create a list of az_lats, co_lats, nm_lats and ut_lats: y
		y = [az_lats, co_lats, nm_lats, ut_lats]

		# Add patches to figure p with line_color=white for x and y
		p.patches(x,y,line_color='white')

		# Specify the name of the output file and show the result
		output_file('four_corners.html')
		show(p)
		
		
Column Data Source
		from bokeh.models import ColumnDataSource
		source = ColumnDataSource(data={
			'x': [1,2,3,4,5],
			'y': [8,6,5,2,3]})
		source.data
		Out[3]: {'x': [1, 2, 3, 4, 5], 'y': [8, 6, 5, 2, 3
		
exercise - 	The Bokeh ColumnDataSource (continued)	
		# Import the ColumnDataSource class from bokeh.plotting
		from bokeh.plotting import ColumnDataSource

		# Create a ColumnDataSource from df: source
		source = ColumnDataSource(df)

		# Add circle glyphs to the figure p
		p.circle(source=source,size=8,color='color',x='Year', y='Time')

		# Specify the name of the output file and show the result
		output_file('sprint.html')
		show(p)

selection
		plot = figure(tools='box_select, lasso_select')
		plot.circle(petal_length, sepal_length,selection_color='red',nonselection_fill_alpha=0.2,nonselection_fill_color='grey')

		
		# Create a figure with the "box_select" tool: p
		p = figure(x_axis_label='Year', y_axis_label='Time', tools='box_select')

		# Add circle glyphs to the figure p with the selected and non-selected properties
		p.circle(source=source, x='Year',y='Time', selection_color='red',nonselection_alpha=0.1)

		# Specify the name of the output file and show the result
		output_file('selection_glyph.html')
		show(p)


Hover appearance
		from bokeh.models import HoverTool
		hover = HoverTool(tooltips=None, mode='hline')
		plot = figure(tools=[hover, 'crosshair'])
		# x and y are lists of random points
		plot.circle(x, y, size=15, hover_color='red')


		# import the HoverTool
		from bokeh.models import HoverTool

		# Add circle glyphs to figure p
		p.circle(x, y, size=10,
				 fill_color='grey', alpha=0.1, line_color=None,
				 hover_fill_color='firebrick', hover_alpha=0.5,
				 hover_line_color='white')

		# Create a HoverTool: hover
		hover = HoverTool(tooltips=None, mode='vline')

		# Add the hover tool to the figure p
		p.add_tools(hover)

		# Specify the name of the output file and show the result
		output_file('hover_glyph.html')
		show(p)

		
color mapping
		from bokeh.models import CategoricalColorMapper
		mapper = CategoricalColorMapper(factors=['setosa', 'virginica','versicolor'],palette=['red', 'green', 'blue'])
		plot = figure(x_axis_label='petal_length',y_axis_label='sepal_length')
		plot.circle('petal_length', 'sepal_length',size=10, source=source,color={'field': 'species','transform': mapper})

		
		#Import CategoricalColorMapper from bokeh.models
		from bokeh.models import CategoricalColorMapper

		# Convert df to a ColumnDataSource: source
		source = ColumnDataSource(df)

		# Make a CategoricalColorMapper object: color_mapper
		color_mapper = CategoricalColorMapper(factors=['Europe', 'Asia', 'US'],
											  palette=['red', 'green', 'blue'])

		# Add a circle glyph to the figure p
		p.circle('weight', 'mpg', source=source,
					color=dict(field='origin', transform=color_mapper),
					legend='origin')

		# Specify the name of the output file and show the result
		output_file('colormap.html')
		show(p)