from bokeh.io import curdoc
# Create plots and widgets
# Add callbacks
# Arrange plots and widgets in layouts
curdoc().add_root(layout)

Running Bokeh Applications
		bokeh serve --show myapp.py
		bokeh serve --show myappdir/

		
exercise - Using current document
		# Perform necessary imports
		from bokeh.io import curdoc
		from bokeh.plotting import figure

		# Create a new plot: plot
		plot = figure()

		# Add a line to the plot
		plot.line([1,2,3,4,5], [2,5,4,6,7])

		# Add the plot to the current document
		curdoc().add_root(plot)

exercise - Add a single slider		
		# Perform the necessary imports
		from bokeh.io import curdoc
		from bokeh.layouts import widgetbox
		from bokeh.models import Slider

		# Create a slider: slider
		slider = Slider(title='my slider', start=0, end=10, step=0.1, value=2)

		# Create a widgetbox layout: layout
		layout = widgetbox(slider)

		# Add the layout to the current document
		curdoc().add_root(layout)	

callback
		from bokeh.io import curdoc
		from bokeh.layouts import column
		from bokeh.models import ColumnDataSource, Slider
		from bokeh.plotting import figure
		from numpy.random import random
		N = 300
		source = ColumnDataSource(data={'x': random(N), 'y': random(N)})
		# Create plots and widgets
		plot = figure()
		plot.circle(x= 'x', y='y', source=source)
		slider = Slider(start=100, end=1000, value=N, step=10, title='Number of points')
		# Add callback to widgets
		def callback(attr, old, new):
			N=slider.value
			source.data={'x': random(N), 'y':random(N)}
		slider.on_change('value', callback)
		# Arrange plots and widgets in layouts
		layout = column(slider, plot)
		curdoc().add_root(layout)

exercise - Learn about widget callbacks
		# Define a callback function: callback
		def callback(attr, old, new):
		# Read the current value of the slider: scale
		scale = slider.value
		# Compute the updated y using np.sin(scale/x): new_y
		new_y = np.sin(scale/x)
		# Update source with the new data values
		source.data = {'x': x, 'y': new_y}
		# Attach the callback to the 'value' property of slider
		slider.on_change('value',callback)
		# Create layout and add to current document
		layout = column(widgetbox(slider), plot)
		curdoc().add_root(layout)
		
# Perform necessary imports
from bokeh.models import ColumnDataSource, Select

# Create ColumnDataSource: source
source = ColumnDataSource(data={
    'x' : fertility,
    'y' : female_literacy
})

# Create a new plot: plot
plot = figure()

# Add circles to the plot
plot.circle('x', 'y', source=source)

# Define a callback function: update_plot
def update_plot(attr, old, new):
    # If the new Selection is 'female_literacy', update 'y' to female_literacy
    if new == 'female_literacy': 
        source.data = {
            'x' : fertility,
            'y' : female_literacy
        }
    # Else, update 'y' to population
    else:
        source.data = {
            'x' : fertility,
            'y' : population
        }

exercise - Select widget - Updating data sources from dropdown callbacks
		# Perform necessary imports
		from bokeh.models import ColumnDataSource, Select

		# Create ColumnDataSource: source
		source = ColumnDataSource(data={
			'x' : fertility,
			'y' : female_literacy
		})

		# Create a new plot: plot
		plot = figure()

		# Add circles to the plot
		plot.circle('x', 'y', source=source)

		# Define a callback function: update_plot
		def update_plot(attr, old, new):
			# If the new Selection is 'female_literacy', update 'y' to female_literacy
			if new == 'female_literacy': 
				source.data = {
					'x' : fertility,
					'y' : female_literacy
				}
			# Else, update 'y' to population
			else:
				source.data = {
					'x' : fertility,
					'y' : population
				}

		# Create a dropdown Select widget: select    
		select = Select(title="distribution", options=['female_literacy', 'population'], value='female_literacy')

		# Attach the update_plot callback to the 'value' property of select
		select.on_change('value', update_plot)

		# Create layout and add to current document
		layout = row(select, plot)
		curdoc().add_root(layout)
		
button callback
		from bokeh.models import Button
		button = Button(label='press me')
		def update():
		# Do something interesting
		button.on_click(update)
		
button types
		from bokeh.models import CheckboxGroup, RadioGroup, Toggle
		toggle = Toggle(label='Some on/off', button_type='success')
		checkbox = CheckboxGroup(labels=['foo', 'bar', 'baz'])
		radio = RadioGroup(labels=['2000', '2010', '2020'])
		def callback(active):
		# Active tells which button is active
		