Exercise - Visualize the response

In the video you learned the main characteristics of the Poisson random variable and how its distribution changes as the parameter λ changes. In this exercise, you will examine the response variable visually to assess the parameter value, spread of the distribution or its skewness.
You will use the crab dataset which you used in previous chapter exercises, but now you will analyze the number of satellite crabs sat, instead of whether there is at least one, near the nesting place.
The crab dataset has been preloaded in the workspace.

		# Import libraries
		%matplotlib inline
		import seaborn as sns
		import matplotlib.pyplot as plt

		# Plot sat variable
		sns.distplot(crab['sat'])

		# Display the plot
		plt.show()
		
Exercise - Fitting a Poisson regression

Continuing with the crab dataset you will fit your first Poisson regression model in this exercise.

The crab dataset has been preloaded in the workspace.

		# Import libraries
		import statsmodels.api as sm
		from statsmodels.formula.api import glm

		# Fit Poisson regression of sat by weight
		model = glm('sat ~ weight', data = crab, family = sm.families.Poisson()).fit()

		# Display model results
		print(model.summary())
		
You have now fitted a Poisson regression model. Notice how easy was to switch from logistic regression using the same glm function. Even the output, which you will learn about next, looks very similar

Exercise - Estimate parameter lambda

In the video you learned how the log link function provides for the linear combination in the parameters defining the Poisson regression model of the form

log(λ)=β0+β1x1

To obtain the response function in terms of lambda we exponentiated the model function to obtain

λ=E(y)=exp(β0+β1x1)
λ=E(y)=exp(β0)×exp(β1x1)

In this exercise, you will use this formulation with the horseshoe crab data to compute the estimate of the mean y

for the female crab width.

Dataset crab is preloaded in the workspace.

		# Import libraries
		import statsmodels.api as sm
		from statsmodels.formula.api import glm

		# Fit Poisson regression of sat by width
		model =glm('sat ~ width', data = crab, family = sm.families.Poisson()).fit()

		# Display model results
		print(model.summary())

		# Compute average crab width
		mean_width = np.mean(crab['width'])

		# Print the compute mean
		print('Average width: ', round(mean_width, 3))

		# Extract coefficients
		intercept, slope = model.params

		# Compute the estimated mean of y (lambda) at the average width
		est_lambda = np.exp(intercept) * np.exp(slope * mean_width)

		# Print estimated mean of y
		print('Estimated mean of y at average width: ', round(est_lambda, 3))
		
Exercise - Interpret Poisson coefficients

Using the fitted model from the previous exercise, model, you will further analyze the results by interpreting coefficients and the multiplicative effect on the mean of the response.

Recall that the multiplicative effect is computed with exp(β1)
.

Compute estimated overdispersion
	ratio = crab_fit.pearson_chi2 / crab_fit.df_resid
	print(ratio)
	
	Ratio = 1 → approximately Poisson
	Ratio < 1 → underdispersion
	Ratio > 1 → overdispersion
	
Negative Binomial Regression
	E(y) = λ
	V ar(y) = λ + αλ^2
	α - dispersion parameter	
	
GLM negative Binomial in Python
	import statsmodels.api as sm
	from statsmodels.formula.api import glm
	model = glm('y ~ x', data = my_data,
	family = sm.families.NegativeBinomial(alpha = 1)).fit()	
	
Exercise - Is the mean equal to the variance?

Under the Poisson model one of the assumptions was that the mean should be the same as the variance. As you learned in the lecture, if this assumption is violated then there is overdispersion. Without adjusting for overdispersion you would wrongly interpret standard errors of the given model.

In this exercise you will first compute the mean and the variance of the number of satellites for the female crabs.

The crab dataset is loaded in your workspace.

		# Compute and print sample mean of the number of satellites: sat_mean
		sat_mean = np.mean(crab.sat)

		print('Sample mean:', round(sat_mean, 3))

		# Compute and print sample variance of the number of satellites: sat_var
		sat_var = np.var(crab.sat)
		print('Sample variance:', round(sat_var, 3))

		# Compute ratio of variance to mean
		print('Ratio:', round(sat_var/sat_mean, 3))	
		
Notice that the variance is 3.37 times the mean. This gives an indication that Poisson GLM will not provide the most accurate fit to the data. Let's do another check before moving on.

Exercise - Computing expected number of counts

In the previous exercises you have computed the mean and variance of the crab data and you determined they are not equal. In this exercise you will practice another analysis for overdispersion by using the already computed mean and calculating the expected number of counts per certain value of counts, for example zero counts. In other words, what count of zero satellites should we expect in the sample given the computed sample mean.

Recall figure from the crab dataset where you can notice a large number of zero counts.

Recall that to compute the expected number of counts given the parameter you can use the defined Poisson distribution, given by

P(y)=λye−λ / y!

The crab dataset and the computed mean sat_mean is preloaded in the workspace.

		# Expected number of zero counts
		exp_zero_cnt = ((sat_mean**0)*np.exp(-sat_mean))/math.factorial(0)

		# Print exp_zero_counts
		print('Expected zero counts given mean of ', round(sat_mean,3), 
			  'is ', round(exp_zero_cnt,3)*100)

		# Number of zero counts in sat variable
		actual_zero_ant = sum(crab['sat']  == 0)

		# Number of observations in crab dataset
		num_obs = len(crab['sat'])

		# Print the percentage of zero count observations in the sample
		print('Actual zero counts in the sample: ', round(actual_zero_ant/ num_obs,3)*100)

Notice that given the mean parametar there should be 5.4% observations with zero count, but in the crab sample there are 35.8% observations with zero count, indicating the presence of overdispersion.

Exercise - Checking for overdispersion

In this exercise you will check for overdispersion in the model you fitted previously, namely the horseshoe crab Poisson model where you fitted sat given width. Recall from the video that to check for potential overdispersion in the fit you would compute the following

model.pearson_chi2 / model.df_resid

where .pearson_chi2 represents Pearson statistic and .df_resid represents the degrees of freedom of the residuals.

The model crab_pois and crab dataset are preloaded in the workspace.

		# Compute and print the overdispersion approximation
		print(crab_pois.pearson_chi2/ crab_pois.df_resid)

There is overdispersion present since the ratio is greater than 1, meaning that the coefficient estimates should not be interpreted directly. Don't worry in the following exercises you will solve this problem!

Exercise - Fitting negative binomial

The negative binomial allows for the variance to exceed the mean, which is what you have measured in the previous exercise in your data crab. In this exercise you will recall the previous fit of the Poisson regression using the log link function and additionally fit negative binomial model also using the log link function.

You will analyze and see how the statistical measures were changed.

The model crab_pois and crab is loaded in your workspace.

		# Define the formula for the model fit
		formula = 'sat ~ width'

		# Fit the GLM negative binomial model using log link function
		crab_NB = glm(formula = formula, data = crab, 
						  family = sm.families.NegativeBinomial()).fit()

		# Print Poisson model's summary
		print(crab_pois.summary())

		# Print the negative binomial model's summary
		print(crab_NB.summary())

Well done! Notice how standard error increased to 0.042, reflecting overdispersion which was not captured with the Poisson model.

Exercise - Confidence intervals for negative Binomial model

Continuing with the previously fitted crab model you will compare the confidence intervals for the negative Binomial model with the Poisson regression model.

The Poisson regression model crab_pois and the negative Binomial model crab_NB, and crab dataset are preloaded in the workspace.

		# Compute confidence intervals for crab_Pois model
		print('Confidence intervals for the Poisson model')
		print(crab_pois.conf_int())

		# Compute confidence intervals for crab_NB model
		print('Confidence intervals for the Negative Binomial model')
		print(crab_NB.conf_int())
		
Notice how the confidence intervals are wider for the negative Binomial model compared to quite narrow confidence intervals for the Poisson model since it did not account for overdispersion.

Exercise - Plotting data and linear model fit

In the previous exercises you have practiced how to fit and interpret the Poisson regression model. In this exercise you will visually analyze the crab data and then the model fit.

First, you will plot a linear fit to the data, which later on you will use to compare to Poisson regression fitted values.

		# Import libraries
		import seaborn as sns
		import matplotlib.pyplot as plt

		# Plot the data points and linear model fit
		sns.regplot('width', 'sat', data = crab,
					y_jitter = 0.3,
					fit_reg = True,
					line_kws = {'color':'green', 
								'label':'LM fit'})

		# Print plot
		plt.show()
		
Great you have visualized model data and the linear model fit. Let's see how this fit compares to the Poisson regression model you have previously fitted.

Exercise - Plotting fitted values

Using the previously fitted Poisson regression model of horseshoe crab data with sat as the response and width as the explanatory variable you will visually assess the model fit and compare to the previously visualized linear model.

The crab data and Poisson regression model saved as model are loaded in the workspace.

		# Add fitted values to the fit_values column of crab dataframe
		crab['fit_values'] = model.fittedvalues

		# Plot data points
		sns.regplot('width', 'sat', data = crab,
					y_jitter = 0.3,
					fit_reg = True, 
					line_kws = {'color':'green', 
								'label':'LM fit'})

		# Poisson regression fitted values
		sns.scatterplot('width','fit_values', data = crab,
				   color = 'red', label = 'Poisson')

		# Print plot          
		plt.show()
		
Great, now you can compare both fits on one graph! Similary as for the model with weight variable the linear and Poisson fits are close in the mid range of width values, but diverge on smaller and larger values.