N-grams and tokenization
	vec = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC,
	...: ngram_range=(1, 2))
	
Range of n-grams in scikit-learn
	holdout = pd.read_csv('HoldoutData.csv', index_col=0)
	predictions = pl.predict_proba(holdout)
	prediction_df = pd.DataFrame(columns=pd.get_dummies(
		...: df[LABELS]).columns, index=holdout.index,
		...: data=predictions)
	prediction_df.to_csv('predictions.csv')
	score = score_submission(pred_path='predictions.csv')
	
Exercise - Deciding what's a word

Before you build up to the winning pipeline, it will be useful to look a little deeper into how the text features will be processed.

In this exercise, you will use CountVectorizer on the training data X_train (preloaded into the workspace) to see the effect of tokenization on punctuation.

Remember, since CountVectorizer expects a vector, you'll need to use the preloaded function, combine_text_columns before fitting to the training data.

		# Import the CountVectorizer
		from sklearn.feature_extraction.text import CountVectorizer

		# Create the text vector
		text_vector = combine_text_columns(X_train)

		# Create the token pattern: TOKENS_ALPHANUMERIC
		TOKENS_ALPHANUMERIC = '[A-Za-z0-9]+(?=\\s+)'

		# Instantiate the CountVectorizer: text_features
		text_features = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC)

		# Fit text_features to the text vector
		text_features.fit(text_vector)

		# Print the first 10 tokens
		print(text_features.get_feature_names()[:10])	
		
Exercise - N-gram range in scikit-learn

In this exercise you'll insert a CountVectorizer instance into your pipeline for the main dataset, and compute multiple n-gram features to be used in the model.

In order to look for ngram relationships at multiple scales, you will use the ngram_range parameter as Peter discussed in the video.

Special functions: You'll notice a couple of new steps provided in the pipeline in this and many of the remaining exercises. Specifically, the dim_red step following the vectorizer step , and the scale step preceeding the clf (classification) step.

These have been added in order to account for the fact that you're using a reduced-size sample of the full dataset in this course. To make sure the models perform as the expert competition winner intended, we have to apply a dimensionality reduction technique, which is what the dim_red step does, and we have to scale the features to lie between -1 and 1, which is what the scale step does.

The dim_red step uses a scikit-learn function called SelectKBest(), applying something called the chi-squared test to select the K "best" features. The scale step uses a scikit-learn function called MaxAbsScaler() in order to squash the relevant features into the interval -1 to 1.

You won't need to do anything extra with these functions here, just complete the vectorizing pipeline steps below. However, notice how easy it was to add more processing steps to our pipeline!

		# Import pipeline
		from sklearn.pipeline import Pipeline

		# Import classifiers
		from sklearn.linear_model import LogisticRegression
		from sklearn.multiclass import OneVsRestClassifier

		# Import CountVectorizer
		from sklearn.feature_extraction.text import CountVectorizer

		# Import other preprocessing modules
		from sklearn.preprocessing import Imputer
		from sklearn.feature_selection import chi2, SelectKBest

		# Select 300 best features
		chi_k = 300

		# Import functional utilities
		from sklearn.preprocessing import FunctionTransformer, MaxAbsScaler
		from sklearn.pipeline import FeatureUnion

		# Perform preprocessing
		get_text_data = FunctionTransformer(combine_text_columns, validate=False)
		get_numeric_data = FunctionTransformer(lambda x: x[NUMERIC_COLUMNS], validate=False)

		# Create the token pattern: TOKENS_ALPHANUMERIC
		TOKENS_ALPHANUMERIC = '[A-Za-z0-9]+(?=\\s+)'

		# Instantiate pipeline: pl
		pl = Pipeline([
				('union', FeatureUnion(
					transformer_list = [
						('numeric_features', Pipeline([
							('selector', get_numeric_data),
							('imputer', Imputer())
						])),
						('text_features', Pipeline([
							('selector', get_text_data),
							('vectorizer', CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC,
														   ngram_range=(1,2))),
							('dim_red', SelectKBest(chi2, chi_k))
						]))
					 ]
				)),
				('scale', MaxAbsScaler()),
				('clf', OneVsRestClassifier(LogisticRegression()))
			])
			
Log loss score: 1.2681. Great work! You'll now add some additional tricks to make the pipeline even better.

Adding interaction features with scikit-learn
	from sklearn.preprocessing import PolynomialFeatures
	x
		Out[2]:
		x1 x2
		a 0 1
		b 1 1
	interaction = PolynomialFeatures(degree=2,
		...: interaction_only=True,
		...: include_bias=False)
	interaction.fit_transform(x)
		Out[4]:
		array([[ 0., 1., 0.],
		[ 1., 1., 1.]])

Sparse interaction features
	SparseInteractions(degree=2).fit_transform(x).toarray()
		Out[5]:
		array([[ 0., 1., 0.],
		[ 1., 1., 1.]])
		
Exercise - Implement interaction modeling in scikit-learn

It's time to add interaction features to your model. The PolynomialFeatures object in scikit-learn does just that, but here you're going to use a custom interaction object, SparseInteractions. Interaction terms are a statistical tool that lets your model express what happens if two features appear together in the same row.

SparseInteractions does the same thing as PolynomialFeatures, but it uses sparse matrices to do so. You can get the code for SparseInteractions at this GitHub Gist.

PolynomialFeatures and SparseInteractions both take the argument degree, which tells them what polynomial degree of interactions to compute.

You're going to consider interaction terms of degree=2 in your pipeline. You will insert these steps after the preprocessing steps you've built out so far, but before the classifier steps.

Pipelines with interaction terms take a while to train (since you're making n features into n-squared features!), so as long as you set it up right, we'll do the heavy lifting and tell you what your score is!


		# Instantiate pipeline: pl
		pl = Pipeline([
				('union', FeatureUnion(
					transformer_list = [
						('numeric_features', Pipeline([
							('selector', get_numeric_data),
							('imputer', Imputer())
						])),
						('text_features', Pipeline([
							('selector', get_text_data),
							('vectorizer', CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC,
														   ngram_range=(1, 2))),  
							('dim_red', SelectKBest(chi2, chi_k))
						]))
					 ]
				)),
				('int', SparseInteractions(degree=2)),
				('scale', MaxAbsScaler()),
				('clf', OneVsRestClassifier(LogisticRegression()))
			])
			
Log loss score: 1.2256. Nice improvement from 1.2681! The student is becoming the master!

The model that won it all
? You now know all the expert
moves to make on this dataset
? NLP: Range of n-grams,
punctuation tokenization
? Stats: Interaction terms
? Computation: Hashing trick
? What class of model was used?

Implementing the hashing trick in scikit-learn
In [5]: from sklearn.feature_extraction.text import HashingVectorizer
In [6]: vec = HashingVectorizer(norm=None,
...: non_negative=True,
...: token_pattern=TOKENS_ALPHANUMERIC,
...: ngram_range=(1, 2))



Exercise - Implementing the hashing trick in scikit-learn

In this exercise you will check out the scikit-learn implementation of HashingVectorizer before adding it to your pipeline later.

As you saw in the video, HashingVectorizer acts just like CountVectorizer in that it can accept token_pattern and ngram_range parameters. The important difference is that it creates hash values from the text, so that we get all the computational advantages of hashing!

		# Import HashingVectorizer
		from sklearn.feature_extraction.text import HashingVectorizer

		# Get text data: text_data
		text_data = combine_text_columns(X_train)

		# Create the token pattern: TOKENS_ALPHANUMERIC
		TOKENS_ALPHANUMERIC = '[A-Za-z0-9]+(?=\\s+)' 

		# Instantiate the HashingVectorizer: hashing_vec
		hashing_vec = HashingVectorizer(token_pattern=TOKENS_ALPHANUMERIC)

		# Fit and transform the Hashing Vectorizer
		hashed_text = hashing_vec.fit_transform(text_data)

		# Create DataFrame and print the head
		hashed_df = pd.DataFrame(hashed_text.data)
		print(hashed_df.head())

Exercise - Build the winning model

You have arrived! This is where all of your hard work pays off. It's time to build the model that won DrivenData's competition.

You've constructed a robust, powerful pipeline capable of processing training and testing data. Now that you understand the data and know all of the tools you need, you can essentially solve the whole problem in a relatively small number of lines of code. Wow!

All you need to do is add the HashingVectorizer step to the pipeline to replace the CountVectorizer step.

The parameters non_negative=True, norm=None, and binary=False make the HashingVectorizer perform similarly to the default settings on the CountVectorizer so you can just replace one with the other.

		# Import the hashing vectorizer
		from sklearn.feature_extraction.text import HashingVectorizer

		# Instantiate the winning model pipeline: pl
		pl = Pipeline([
				('union', FeatureUnion(
					transformer_list = [
						('numeric_features', Pipeline([
							('selector', get_numeric_data),
							('imputer', Imputer())
						])),
						('text_features', Pipeline([
							('selector', get_text_data),
							('vectorizer', HashingVectorizer(token_pattern=TOKENS_ALPHANUMERIC,
															 non_negative=True, norm=None, binary=False,
															 ngram_range=(1,2))),
							('dim_red', SelectKBest(chi2, chi_k))
						]))
					 ]
				)),
				('int', SparseInteractions(degree=2)),
				('scale', MaxAbsScaler()),
				('clf', OneVsRestClassifier(LogisticRegression()))
			])

	Well done! Log loss: 1.2258. Looks like the performance is about the same, but this is expected since the HashingVectorizer should work the same as the CountVectorizer. Try this pipeline out on the whole dataset on your local machine to see its full power!
	
	
	
Exercise
What tactics got the winner the best score?

Now you've implemented the winning model from start to finish. If you want to use this model locally, this Jupyter notebook contains all the code you've worked so hard on. You can now take that code and build on it!

Let's take a moment to reflect on why this model did so well. What tactics got the winner the best score?

https://github.com/datacamp/course-resources-ml-with-experts-budgets/blob/master/notebooks/1.0-full-model.ipynb

