np.random
		np.random.random()
			draw number between 0 and 1

Bernoulli trial
		experience a 2 niveaux
		
seed
		np.random.seed()
		pour avoir la mm reproducibility
		
exemple random

	import numpy as np
	np.random.seed(42)
	random_numbers = np.random.random(size=4)
	random_numbers
			Out[4]: array([ 0.37454012, 0.95071431, 0.73199394,
	0.59865848])
	heads = random_numbers < 0.5
	heads
			Out[6]: array([ True, False, False, False], dtype=bool)
	np.sum(heads)
			Out[7]: 1
			
			
	In [1]: n_all_heads = 0 # Initialize number of 4-heads trials
	In [2]: for _ in range(10000):
	...: heads = np.random.random(size=4) < 0.5
	...: n_heads = np.sum(heads)
	...: if n_heads == 4:
	...: n_all_heads += 1
	...:
	...:
	In [3]: n_all_heads / 10000
	
np.empty
		pour initialiser un numpy
		random_numbers = np.empty(100000)
		
Bernoulli
		# Seed random number generator
		np.random.seed(42)

		# Initialize the number of defaults: n_defaults
		n_defaults = np.empty(1000)

		# Compute the number of defaults
		for i in range(1000):
			n_defaults[i] = perform_bernoulli_trials(100,0.05)


		# Plot the histogram with default number of bins; label your axes
		_ = plt.hist(n_defaults, normed=True)
		_ = plt.xlabel('number of defaults out of 100 loans')
		_ = plt.ylabel('probability')

		# Show the plot
		plt.show()

		
Exercise - perform bernoulli trial
		def perform_bernoulli_trials(n, p):
			"""Perform n Bernoulli trials with success probability p
			and return number of successes."""
			# Initialize number of successes: n_success
			n_success = 0

			# Perform trials
			for i in range(n):
				# Choose random number between zero and one: random_number
				random_number = np.random.random()

				# If less than p, it's a success so add one to n_success
				if random_number < p:
					n_success +=1

			return n_success
		
Exercise - Will the bank fail?
		# Compute ECDF: x, y
		x,y = ecdf(n_defaults)

		# Plot the ECDF with labeled axes
		_ = plt.plot(x,y,marker='.',linestyle='none')
		_ = plt.xlabel('number of defaults out of 100')
		_ = plt.ylabel('CDF')

		# Show the plot
		plt.show()

		# Compute the number of 100-loan simulations with 10 or more defaults: n_lose_money
		n_lose_money = np.sum(n_defaults>=10)

		# Compute and print probability of losing money
		print('Probability of losing money =', n_lose_money / len(n_defaults))		
		
The Binomial CDF
		import matplotlib.pyplot as plt
		import seaborn as sns
		sns.set()
		x, y = ecdf(samples)10
		_ = plt.plot(x, y, marker='.', linestyle='none')
		plt.margins(0.02)
		_ = plt.xlabel('number of successes')
		_ = plt.ylabel('CDF')
		plt.show()
		

		
		# Take 10,000 samples out of the binomial distribution: n_defaults
		n_defaults=np.random.binomial(100,0.05,size=10000)
		# Compute CDF: x, y
		x, y = ecdf(n_defaults)
		# Plot the CDF with axis labels
		_ = plt.plot(x, y,marker='.', linestyle='none')
		_ = plt.xlabel('number of defaults out of 100 loans')
		_ = plt.ylabel('CDF')
		# Show the plot
		plt.show()

		
Exercise - Plotting the Binomial PMF

		# Compute bin edges: bins
		bins = np.arange(0, max(n_defaults) + 1.5) - 0.5
		# Generate histogram
		_ = plt.hist(n_defaults, normed=True, bins=bins)
		# Label axes
		_ = plt.xlabel('number of defaults out of 100 loans')
		_ = plt.ylabel('PMF')
		# Show the plot
		plt.show()
	
Poisson CDF	
		samples = np.random.poisson(6, size=10000)
		x, y = ecdf(samples)
		_ = plt.plot(x, y, marker='.', linestyle='none')
		plt.margins(0.02)
		_ = plt.xlabel('number of successes')
		_ = plt.ylabel('CDF')
		plt.show()
		
Relationship between Binomial and Poisson distributions

		You just heard that the Poisson distribution is a limit of the Binomial distribution for rare events. 

		The standard deviation of the Binomial distribution gets closer and closer to that of the Poisson distribution as the probability p gets lower and lower.
		
# Draw 10,000 samples out of Poisson distribution: n_nohitters
n_nohitters=np.random.poisson(251/115,size=10000)
# Compute number of samples that are seven or greater: n_large
n_large = np.sum(n_nohitters>=7)
# Compute probability of getting seven or more: p_large
p_large=n_large/10000
# Print the result
print('Probability of seven or more no-hitters:', p_large)
		