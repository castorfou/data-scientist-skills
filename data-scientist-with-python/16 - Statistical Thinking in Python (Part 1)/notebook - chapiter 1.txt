histogram
		import matplotlib.pyplot as plt
		_ = plt.hist(df_swing['dem_share'])
		_ = plt.xlabel('percent of vote for Obama')
		_ = plt.ylabel('number of counties')
		plt.show()

		bin_edges = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
		_ = plt.hist(df_swing['dem_share'], bins=bin_edges)

histogram with seaborn

		import seaborn as sns
		sns.set()
		_ = plt.hist(df_swing['dem_share'])
		_ = plt.xlabel('percent of vote for Obama')
		_ = plt.ylabel('number of counties')
		plt.show()

Exercise #1 - 	Adjusting the number of bins in a histogram
 The "square root rule" is a commonly-used rule of thumb for choosing number of bins: choose the number of bins to be the square root of the number of samples.
	
		# Import numpy
		import numpy as np
		# Compute number of data points: n_data
		n_data = len(versicolor_petal_length)
		# Number of bins is the square root of number of data points: n_bins
		n_bins = np.sqrt(n_data)
		# Convert number of bins to integer: n_bins
		n_bins=int(n_bins)
		# Plot the histogram
		_ = plt.hist(versicolor_petal_length, bins=n_bins)
		# Label axes
		_ = plt.xlabel('petal length (cm)')
		_ = plt.ylabel('count')
		# Show histogram
		plt.show()
		
bee swarm plot
		_ = sns.swarmplot(x='state', y='dem_share', data=df_swing)
		_ = plt.xlabel('state')
		_ = plt.ylabel('percent of vote for Obama')
		plt.show()
		
ECDF - empirical cumulative distribution function
		import numpy as np
		x = np.sort(df_swing['dem_share'])
		y = np.arange(1, len(x)+1) / len(x)
		_ = plt.plot(x, y, marker='.', linestyle='none')
		_ = plt.xlabel('percent of vote for Obama')
		_ = plt.ylabel('ECDF')
		plt.margins(0.02) # Keeps data off plot edges
		plt.show()

Exercise - 		Computing the ECDF
	def ecdf(data):
		"""Compute ECDF for a one-dimensional array of measurements."""
		# Number of data points: n
		n = len(data)

		# x-data for the ECDF: x
		x = np.sort(data)

		# y-data for the ECDF: y
		y = np.arange(1, n+1) / n

		return x, y		
		
	# Compute ECDF for versicolor data: x_vers, y_vers
	x_vers, y_vers = ecdf(versicolor_petal_length)

	# Generate plot
	_ = plt.plot(x_vers, y_vers, marker='.', linestyle='none')

	# Label the axes
	_ = plt.xlabel('petal lengths')
	_ = plt.ylabel('ECDF')


	# Display the plot
	plt.show()	