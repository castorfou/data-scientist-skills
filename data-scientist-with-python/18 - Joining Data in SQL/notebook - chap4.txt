Subquery inside WHERE clause set-up

	SELECT name, fert_rate
	FROM states
	WHERE continent = 'Asia'
		AND fert_rate <
		(SELECT AVG(fert_rate)
		FROM states);

Subquery inside SELECT clauses - setup

	SELECT DISTINCT continent,
		(SELECT COUNT(*)
		FROM states
		WHERE prime_ministers.continent = states.continent) AS countries_num
	FROM prime_ministers;

Exercise - Subquery inside where
	-- Select fields
	SELECT *
	  -- From populations
	  FROM populations
	-- Where life_expectancy is greater than
	WHERE year = 2015 and life_expectancy > 
	  -- 1.15 * subquery
	  (SELECT AVG(life_expectancy) * 1.15 FROM populations WHERE year=2015);
  
Exercise - Subquery inside select
  
	/*SELECT countries.name AS country, COUNT(*) AS cities_num
	  FROM cities
		INNER JOIN countries
		ON countries.code = cities.country_code
	GROUP BY country
	ORDER BY cities_num DESC, country
	LIMIT 9;*/


	SELECT name AS country,
	  (SELECT COUNT(name) AS cities_num
	   FROM cities
	   WHERE countries.code = cities.country_code) AS cities_num
	FROM countries
	ORDER BY cities_num DESC, country
	LIMIT 9;

Subquery inside FROM clauses - setup
	
	SELECT DISTINCT monarchs.continent, subquery.max_perc
	FROM monarchs,
		(SELECT continent, MAX(women_parli_perc) AS max_perc
		FROM states
		GROUP BY continent) AS subquery
	WHERE monarchs.continent = subquery.continent
	ORDER BY continent;


Exercise - Subquery inside from	
-- Select fields
SELECT local_name, lang_num
  -- From countries
  FROM countries,
  	-- Subquery (alias as subquery)
  	(SELECT code, COUNT(name) as lang_num
  	 FROM languages
  	 GROUP BY code) AS subquery
  -- Where codes match
  WHERE countries.code = subquery.code
-- Order by descending number of languages
ORDER by lang_num DESC;



-- Select fields
SELECT MAX(inflation_rate) AS max_inf
  -- Subquery using FROM (alias as subquery)
  FROM (
      SELECT name, continent, economies.inflation_rate
  -- From countries
  FROM countries
  	-- Join to economies
  	INNER JOIN economies
    -- Match on code
    USING(code)
-- Where year is 2015
WHERE year=2015) AS subquery
-- Group by continent
GROUP BY continent;


-- Select fields
SELECT name, continent, inflation_rate
  -- From countries
  FROM countries
	-- Join to economies
	INNER JOIN economies
	-- Match on code
	ON countries.code = economies.code
  -- Where year is 2015
  WHERE year = 2015
    -- And inflation rate in subquery (alias as subquery)
    AND inflation_rate IN (
        SELECT MAX(inflation_rate) AS max_inf
        FROM (
             SELECT name, continent, inflation_rate
             FROM countries
             INNER JOIN economies
             ON countries.code = economies.code
             WHERE year = 2015) AS subquery
        GROUP BY continent);
		
-- Select fields
SELECT code, inflation_rate, unemployment_rate
  -- From economies
  FROM economies
  -- Where year is 2015 and code is not in
  WHERE year = 2015 AND code NOT IN
  	-- Subquery
  	(SELECT code
  	 FROM countries
  	 WHERE (gov_form = 'Constitutional Monarchy' OR gov_form LIKE '%Republic%'))
-- Order by inflation rate
ORDER BY inflation_rate;	

Exercise - Final challenge
		SELECT DISTINCT c.name, e.total_investment, e.imports
		  -- From table (with alias)
		  FROM countries AS c
			-- Join with table (with alias)
			LEFT JOIN economies AS e
			  -- Match on code
			  ON (c.code = e.code
			  -- and code in Subquery
				AND c.code IN (
				  SELECT l.code
				  FROM languages AS l
				  WHERE official = 'true'
				) )
		  -- Where region and year are correct
		  WHERE c.region = 'Central America' AND e.year = 2015
		-- Order by field
		ORDER BY c.name ASC;
		
-- Select fields
SELECT c.region, c.continent, AVG(p.fertility_rate) AS avg_fert_rate
  -- From left table
  FROM countries AS c
    -- Join to right table
    INNER JOIN populations AS p
      -- Match on join condition
      ON c.code = p.country_code
  -- Where specific records matching some condition
  WHERE p.year = 2015
-- Group appropriately
GROUP BY c.region, c.continent
-- Order appropriately
ORDER BY avg_fert_rate;	

-- Select fields
SELECT name, country_code, city_proper_pop, metroarea_pop,  
      -- Calculate city_perc
      city_proper_pop / metroarea_pop * 100 AS city_perc
  -- From appropriate table
  FROM cities
  -- Where 
  WHERE name IN
    -- Subquery
    (SELECT capital
     FROM countries
     WHERE (continent = 'Europe'
        OR continent LIKE '%America%'))
       AND metroarea_pop IS NOT NULL
-- Order appropriately
ORDER BY city_perc DESC
-- Limit amount
LIMIT 10;	
		
		
		
		
		
		
		
		
		
		
		
		