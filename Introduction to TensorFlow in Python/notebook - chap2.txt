Importing data for use in TensorFlow
	Data can be imported using tensorflow
		Useful for managing complex pipelines
		Not necessary for this chapter
	Simpler option used in this chapter
		Import data using pandas
		Convert data to numpy array
		Use in tensorflow without modification
		
How to import and convert data
	# Import numpy and pandas
	import numpy as np
	import pandas as pd
	# Load data from csv
	housing = pd.read_csv('kc_housing.csv')
	# Convert to numpy array
	housing = np.array(housing)

Setting the data type	
	# Load KC dataset
	housing = pd.read_csv('kc_housing.csv')
	# Convert price column to float32
	price = np.array(housing['price'], np.float32)
	# Convert waterfront column to Boolean
	waterfront = np.array(housing['waterfront'], np.bool)

Exercise - Load data using pandas

Before you can train a machine learning model, you must first import data. There are several valid ways to do this, but for now, we will use a simple one-liner from pandas: pd.read_csv(). Recall from the video that the first argument specifies the path or URL. All other arguments are optional.

In this exercise, you will import the King County housing dataset, which we will use to train a linear model later in the chapter.
	
		# Import pandas under the alias pd
		import pandas as pd

		# Assign the path to a string variable named data_path
		data_path = 'kc_house_data.csv'

		# Load the dataset as a dataframe named housing 
		housing = pd.read_csv(data_path)

		# Print the price column of housing
		print(housing.price)
		
Exercise - Setting the data type

In this exercise, you will both load data and set its type. Note that housing is available and pandas has been imported as pd. You will import numpy and tensorflow, and define tensors that are usable in tensorflow using columns in housing with a given data type. Recall that you can select the price column, for instance, from housing using housing['price'].

		# Import numpy and tensorflow with their standard aliases
		import numpy as np
		import tensorflow as tf

		# Use a numpy array to define price as a 32-bit float
		price = np.array(housing['price'], np.float32)

		# Define waterfront as a Boolean using cast
		waterfront = tf.cast(housing['waterfront'], tf.bool)

		# Print price and waterfront
		print(price)
		print(waterfront)