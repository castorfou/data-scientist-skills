A simple dense layer
	import tensorflow as tf
	# Define inputs (features)
	inputs = tf.constant([[1, 35]])
	# Define weights
	weights = tf.Variable([[-0.05], [-0.01]])
	# Define the bias
	bias = tf.Variable([0.5])
	# Multiply inputs (features) by the weights
	product = tf.matmul(inputs, weights)
	# Define dense layer
	dense = tf.keras.activations.sigmoid(product+bias)

Defining a complete model
	import tensorflow as tf
	# Define input (features) layer
	inputs = tf.constant(data, tf.float32)
	# Define first dense layer
	dense1 = tf.keras.layers.Dense(10, activation='sigmoid')(inputs)
	# Define second dense layer
	dense2 = tf.keras.layers.Dense(5, activation='sigmoid')(dense1)
	# Define output (predictions) layer
	outputs = tf.keras.layers.Dense(1, activation='sigmoid')(dense2)

High-level versus low-level approach
	#high-level
	dense = keras.layers.Dense(10, activation='sigmoid')
	
	#low-level
	prod = matmul(inputs, weights)
	dense = keras.activations.sigmoid(prod)
	
Exercise - 	The linear algebra of dense layers

There are two ways to define a dense layer in tensorflow. The first involves the use of low-level, linear algebraic operations. The second makes use of high-level keras operations. In this exercise, we will use the first method to construct the network shown in the image below.

This image depicts an neural network with 5 input nodes and 3 output nodes.

The input layer contains 3 features -- education, marital status, and age -- which are available as borrower_features. The hidden layer contains 2 nodes and the output layer contains a single node.

For each layer, you will take the previous layer as an input, initialize a set of weights, compute the product of the inputs and weights, and then apply an activation function. Note that Variable(), ones(), matmul(), and keras() have been imported from tensorflow.

		bias1 = Variable(1.0)

		# Initialize weights1 as 3x2 variable of ones
		weights1 = Variable(ones((3, 2)))

		# Perform matrix multiplication of borrower_features and weights1
		product1 = matmul(borrower_features, weights1)

		# Apply sigmoid activation function to product1 + bias1
		dense1 = keras.activations.sigmoid(product1+ bias1)

		# Print shape of dense1
		print("\n dense1's output shape: {}".format(dense1.shape))
		
		# Initialize bias2 and weights2
		bias2 = Variable(1.0)
		weights2 = Variable(ones((2, 1)))

		# Perform matrix multiplication of dense1 and weights2
		product2 = matmul(dense1, weights2)

		# Apply activation to product2 + bias2 and print the prediction
		prediction = keras.activations.sigmoid(product2 + bias2)
		print('\n prediction: {}'.format(prediction.numpy()[0,0]))
		print('\n actual: 1')

Excellent work! Our model produces predicted values in the interval between 0 and 1. For the example we considered, the actual value was 1 and the predicted value was a probability between 0 and 1. This, of course, is not meaningful, since we have not yet trained our model's parameters.	

Exercise - The low-level approach with multiple examples

In this exercise, we'll build further intuition for the low-level approach by constructing the first dense hidden layer for the case where we have multiple examples. We'll assume the model is trained and the first layer weights, weights1, and bias, bias1, are available. We'll then perform matrix multiplication of the borrower_features tensor by the weights1 variable. Recall that the borrower_features tensor includes education, marital status, and age. Finally, we'll apply the sigmoid function to the elements of products1 + bias1, yielding dense1.

products1=⎡⎣⎢⎢⎢⎢⎢⎢32112311112324494929⎤⎦⎥⎥⎥⎥⎥⎥⎡⎣⎢−0.60.8−0.090.6−0.3−0.08⎤⎦⎥

Note that matmul() and keras() have been imported from tensorflow.

		# Compute the product of borrower_features and weights1
		products1 = matmul(borrower_features, weights1)

		# Apply a sigmoid activation function to products1
		dense1 = keras.activations.sigmoid(products1+bias1)

		# Print the shapes of borrower_features, weights1, bias1, and dense1
		print('\n shape of borrower_features: ', borrower_features.shape)
		print('\n shape of weights1: ', weights1.shape)
		print('\n shape of bias1: ', bias1.shape)
		print('\n shape of dense1: ', dense1.shape)
		
Good job! Note that our input data, borrower_features, is 5x3 because it consists of 5 examples for 3 features. The shape of weights1 is 3x2, as it was in the previous exercise, since it does not depend on the number of examples. Additionally, bias1 is a scalar. Finally, dense1 is 5x2, which means that we can multiply it by the following set of weights, weights2, which we defined to be 2x1 in the previous exercise.

Exercise - Using the dense layer operation

We've now seen how to define dense layers in tensorflow using linear algebra. In this exercise, we'll skip the linear algebra and let keras work out the details. This will allow us to construct the network below, which has 2 hidden layers and 10 features, using less code than we needed for the network with 1 hidden layer and 3 features.

This image depicts an neural network with 10 inputs nodes and 1 output node.

To construct this network, we'll need to define three dense layers, each of which takes the previous layer as an input, multiplies it by weights, and applies an activation function. Note that input data has been defined and is available as a 100x10 tensor: borrower_features. Additionally, the keras.layers module is available.

		dense1 = keras.layers.Dense(7, activation='sigmoid')(borrower_features)

		# Define a dense layer with 3 output nodes
		dense2 = keras.layers.Dense(3, activation='sigmoid')(dense1)

		# Define a dense layer with 1 output node
		predictions = keras.layers.Dense(1, activation='sigmoid')(dense2)

		# Print the shapes of dense1, dense2, and predictions
		print('\n shape of dense1: ', dense1.shape)
		print('\n shape of dense2: ', dense2.shape)
		print('\n shape of predictions: ', predictions.shape)

Great work! With just 8 lines of code, you were able to define 2 dense hidden layers and an output layer. This is the advantage of using high-level operations in tensorflow. Note that each layer has 100 rows because the input data contains 100 examples.
	
	
Activation functions in neural networks
	import tensorflow as tf
	# Define input layer
	inputs = tf.constant(borrower_features, tf.float32)
	# Define dense layer 1
	dense1 = tf.keras.layers.Dense(16, activation='relu')(inputs)
	# Define dense layer 2
	dense2 = tf.keras.layers.Dense(8, activation='sigmoid')(dense1)
	# Define output layer
	outputs = tf.keras.layers.Dense(4, activation='softmax')(dense2)

Exercise - Binary classification problems

In this exercise, you will again make use of credit card data. The target variable, default, indicates whether a credit card holder defaults on her payment in the following period. Since there are only two options--default or not--this is a binary classification problem. While the dataset has many features, you will focus on just three: the size of the three latest credit card bills. Finally, you will compute predictions from your untrained network, outputs, and compare those the target variable, default.

The tensor of features has been loaded and is available as bill_amounts. Additionally, the constant(), float32, and keras.layers.Dense() operations are available.

		# Construct input layer from features
		inputs = constant(bill_amounts, float32)

		# Define first dense layer
		dense1 = keras.layers.Dense(3, activation='relu')(inputs)

		# Define second dense layer
		dense2 = keras.layers.Dense(2, activation='relu')(dense1)

		# Define output layer
		outputs = keras.layers.Dense(1, activation='sigmoid')(dense2)

		# Print error for first five examples
		error = default[:5] - outputs.numpy()[:5]
		print(error)
		
Excellent work! If you run the code several times, you'll notice that the errors change each time. This is because you're using an untrained model with randomly initialized parameters. Furthermore, the errors fall on the interval between -1 and 1 because default is a binary variable that takes on values of 0 and 1 and outputs is a probability between 0 and 1.

Exercise - Multiclass classification problems

In this exercise, we expand beyond binary classification to cover multiclass problems. A multiclass problem has targets that can take on three or more values. In the credit card dataset, the education variable can take on 6 different values, each corresponding to a different level of education. We will use that as our target in this exercise and will also expand the feature set from 3 to 10 columns.

As in the previous problem, you will define an input layer, dense layers, and an output layer. You will also print the untrained model's predictions, which are probabilities assigned to the classes. The tensor of features has been loaded and is available as borrower_features. Additionally, the constant(), float32, and keras.layers.Dense() operations are available.

		# Construct input layer from borrower features
		inputs =  constant(borrower_features, float32)

		# Define first dense layer
		dense1 = keras.layers.Dense(10, activation='sigmoid')(inputs)

		# Define second dense layer
		dense2 = keras.layers.Dense(8, activation='relu')(dense1)

		# Define output layer
		outputs = keras.layers.Dense(6, activation='softmax')(dense2)

		# Print first five predictions
		print(outputs.numpy()[:5])
		
Great work! Notice that each row of outputs sums to one. This is because a row contains the predicted class probabilities for one example. As with the previous exercise, our predictions are not yet informative, since we are using an untrained model with randomly initialized parameters. This is why the model tends to assign similar probabilities to each class.

The gradient descent optimizer
	Stochastic gradient descent (SGD) optimizer
		tf.keras.optimizers.SGD()
		learning_rate
	Simple and easy to interpret

The RMS prop optimizer
	Root mean squared (RMS) propagation optimizer
		Applies different learning rates to each feature
		tf.keras.optimizers.RMSprop()
		learning_rate
		momentum
		decay
	Allows for momentum to both build and decay

The adam optimizer
	Adaptive moment (adam) optimizer
		tf.keras.optimizers.Adam()
		learning_rate
		beta1
	Performs well with default parameter values

A complete example
	import tensorflow as tf
	# Define the model function
	def model(bias, weights, features = borrower_features):
		product = tf.matmul(features, weights)
		return tf.keras.activations.sigmoid(product+bias)
	# Compute the predicted values and loss
	def loss_function(bias, weights, targets = default, features = borrower_features):
		predictions = model(bias, weights)
		return tf.keras.losses.binary_crossentropy(targets, predictions)
	# Minimize the loss function with RMS propagation
	opt = tf.keras.optimizers.RMSprop(learning_rate=0.01, momentum=0.9)
	opt.minimize(lambda: loss_function(bias, weights), var_list=[bias, weights])
	
Exercise - The dangers of local minima

Consider the plot of the following loss function, loss_function(), which contains a global minimum, marked by the dot on the right, and several local minima, including the one marked by the dot on the left.

The graph is of a single variable function that contains multiple local minima and a global minimum.

In this exercise, you will try to find the global minimum of loss_function() using keras.optimizers.SGD(). You will do this twice, each time with a different initial value of the input to loss_function(). First, you will use x_1, which is a variable with an initial value of 6.0. Second, you will use x_2, which is a variable with an initial value of 0.3. Note that loss_function() has been defined and is available.

		# Initialize x_1 and x_2
		x_1 = Variable(6.0,float32)
		x_2 = Variable(0.3,float32)

		# Define the optimization operation
		opt = keras.optimizers.SGD(learning_rate=0.01)

		for j in range(100):
			# Perform minimization using the loss function and x_1
			opt.minimize(lambda: loss_function(x_1), var_list=[x_1])
			# Perform minimization using the loss function and x_2
			opt.minimize(lambda: loss_function(x_2), var_list=[x_2])

		# Print x_1 and x_2 as numpy arrays
		print(x_1.numpy(), x_2.numpy())
		
Great work! Notice that we used the same optimizer and loss function, but two different initial values. When we started at 6.0 with x_1, we found the global minimum at 4.38, marked by the dot on the right. When we started at 0.3, we stopped around 0.42 with x_2, the local minimum marked by a dot on the far left.

Exercise - The previous problem showed how easy it is to get stuck in local minima. We had a simple optimization problem in one variable and gradient descent still failed to deliver the global minimum when we had to travel through local minima first. One way to avoid this problem is to use momentum, which allows the optimizer to break through local minima. We will again use the loss function from the previous problem, which has been defined and is available for you as loss_function().

The graph is of a single variable function that contains multiple local minima and a global minimum.

Several optimizers in tensorflow have a momentum parameter, including SGD and RMSprop. You will make use of RMSprop in this exercise. Note that x_1 and x_2 have been initialized to the same value this time. Furthermore, keras.optimizers.RMSprop() has also been imported for you from tensorflow.

		x_1 = Variable(0.05,float32)
		x_2 = Variable(0.05,float32)

		# Define the optimization operation for opt_1
		opt_1 = keras.optimizers.RMSprop(learning_rate=0.01, momentum=0.99)
		opt_2 = keras.optimizers.RMSprop(learning_rate=0.01, momentum=0.00)

		for j in range(100):
			opt_1.minimize(lambda: loss_function(x_1), var_list=[x_1])
			# Define the minimization operation for opt_2
			opt_2.minimize(lambda: loss_function(x_2), var_list=[x_2])

		# Print x_1 and x_2 as numpy arrays
		print(x_1.numpy(), x_2.numpy())
		
Good work! Recall that the global minimum is approximately 4.38. Notice that opt_1 built momentum, bringing x_1 closer to the global minimum. To the contrary, opt_2, which had a momentum parameter of 0.0, got stuck in the local minimum on the left.

Initializing variables in TensorFlow
	import tensorflow as tf
	# Define 500x500 random normal variable
	weights = tf.Variable(tf.random.normal([500, 500]))
	# Define 500x500 truncated random normal variable
	weights = tf.Variable(tf.random.truncated_normal([500, 500]))
	# Define a dense layer with the default initializer
	dense = tf.keras.layers.Dense(32, activation='relu')
	# Define a dense layer with the zeros initializer
	dense = tf.keras.layers.Dense(32, activation='relu',kernel_initializer='zeros')

Implementing dropout in a network
	import numpy as np
	import tensorflow as tf
	# Define input data
	inputs = np.array(borrower_features, np.float32)
	# Define dense layer 1
	dense1 = tf.keras.layers.Dense(32, activation='relu')(inputs)
	# Define dense layer 2
	dense2 = tf.keras.layers.Dense(16, activation='relu')(dense1)
	# Apply dropout operation
	dropout1 = tf.keras.layers.Dropout(0.25)(dense2)
	# Define output layer
	outputs = tf.layers.Dense(1, activation='sigmoid')(dropout1)

Initialization in TensorFlow

A good initialization can reduce the amount of time needed to find the global minimum. In this exercise, we will initialize weights and biases for a neural network that will be used to predict credit card default decisions. To build intuition, we will use the low-level, linear algebraic approach, rather than making use of convenience functions and high-level keras operations. We will also expand the set of input features from 3 to 23. Several operations have been imported from tensorflow: Variable(), random(), and ones().

		# Define the layer 1 weights
		w1 = Variable(random.normal([23, 7]))

		# Initialize the layer 1 bias
		b1 = Variable(ones([7]))

		# Define the layer 2 weights
		w2 = Variable(random.normal([7, 1]))

		# Define the layer 2 bias
		b2 = Variable(0.0)	
		
Exercise - 	Defining the model and loss function

In this exercise, you will train a neural network to predict whether a credit card holder will default. The features and targets you will use to train your network are available in the Python shell as borrower_features and default. You defined the weights and biases in the previous exercise.

Note that the predictions layer is defined as σ(layer1∗w2+b2)
, where σ is the sigmoid activation, layer1 is a tensor of nodes for the first hidden dense layer, w2 is a tensor of weights, and b2 is the bias tensor.

The trainable variables are w1, b1, w2, and b2. Additionally, the following operations have been imported for you: keras.activations.relu() and keras.layers.Dropout().

		# Define the model
		def model(w1, b1, w2, b2, features = borrower_features):
			# Apply relu activation functions to layer 1
			layer1 = keras.activations.relu(matmul(features, w1) + b1)
			# Apply dropout
			dropout = keras.layers.Dropout(0.25)(layer1)
			return keras.activations.sigmoid(matmul(dropout, w2) + b2)

		# Define the loss function
		def loss_function(w1, b1, w2, b2, features = borrower_features, targets = default):
			predictions = model(w1, b1, w2, b2)
			# Pass targets and predictions to the cross entropy loss
			return keras.losses.binary_crossentropy(targets, predictions)	
			
Nice work! One of the benefits of using tensorflow is that you have the option to customize models down to the linear algebraic-level, as we've shown in the last two exercises. If you print w1, you can see that the objects we're working with are simply tensors.

Exercise - Training neural networks with TensorFlow

In the previous exercise, you defined a model, model(w1, b1, w2, b2, features), and a loss function, loss_function(w1, b1, w2, b2, features, targets), both of which are available to you in this exercise. You will now train the model and then evaluate its performance by predicting default outcomes in a test set, which consists of test_features and test_targets and is available to you. The trainable variables are w1, b1, w2, and b2. Additionally, the following operations have been imported for you: keras.activations.relu() and keras.layers.Dropout().

		# Train the model
		for j in range(100):
			# Complete the optimizer
			opt.minimize(lambda: loss_function(w1, b1, w2, b2), 
						 var_list=[w1, b1, w2, b2])

		# Make predictions with model
		model_predictions = model(w1, b1, w2, b2, test_features)

		# Construct the confusion matrix
		confusion_matrix(test_targets, model_predictions)

Nice work! The diagram shown is called a ``confusion matrix.'' The diagonal elements show the number of correct predictions. The off-diagonal elements show the number of incorrect predictions. We can see that the model performs reasonably-well, but does so by overpredicting non-default. This suggests that we may need to train longer, tune the model's hyperparameters, or change the model's architecture.
