Part 1 - Step 1
	Read data from CSV

	import csv
	csvfile = open('ART_GALLERY.csv', 'r')
	for row in csv.reader(csvfile):
		print(row)
		
Part 1 - Step 2
	Create and use a Counter with a slight twist
	
	from collections import Counter
	nyc_eatery_count_by_types = Counter(nyc_eatery_types)
	
	Use date parts for Grouping like in Chapter 4
	
	daily_violations = defaultdict(int)
	for violation in parking_violations:
		violation_date = datetime.strptime(violation[4], '%m/%d/%Y')
		daily_violations[violation_date.day] += 1		

Part 1 - Step 3
	Group data by Month
	The date components we learned about earlier.
	
	from collections import defaultdict
	eateries_by_park = defaultdict(list)
	for park_id, name in nyc_eateries_parks:
		eateries_by_park[park_id].append(name)

Part 1 - Final
	Find 5 most common locations for crime each month.
	
	print(nyc_eatery_count_by_types.most_common(3))
	[('Mobile Food Truck', 114), ('Food Cart', 74), ('Snack Bar', 24)]		

Exercise - Reading your data with CSV Reader and Establishing your Data Containers

Let's get started! The exercises in this chapter are intentionally more challenging, to give you a chance to really solidify your knowledge. Don't lose heart if you find yourself stuck; think back to the concepts you've learned in previous chapters and how you can apply them to this crime dataset. Good luck!

Your data file, crime_sampler.csv contains the date (1st column), block where it occurred (2nd column), primary type of the crime (3rd), description of the crime (4th), description of the location (5th), if an arrest was made (6th), was it a domestic case (7th), and city district (8th).

Here, however, you'll focus only 4 columns: The date, type of crime, location, and whether or not the crime resulted in an arrest.

Your job in this exercise is to use a CSV Reader to load up a list to hold the data you're going to analyze.


		# Import the csv module
		import csv

		# Create the file object: csvfile
		csvfile = open('crime_sampler.csv', 'r')

		# Create an empty list: crime_data
		crime_data = []

		# Loop over a csv reader on the file object
		for row in csv.reader(csvfile):

			# Append the date, type of crime, location description, and arrest
			crime_data.append((row[0], row[2], row[4], row[5]))
			
		# Remove the first element from crime_data
		crime_data.pop(0)

		# Print the first 10 records
		print(crime_data[:10])

Exercise - Find the Months with the Highest Number of Crimes

Using the crime_data list from the prior exercise, you'll answer a common question that arises when dealing with crime data: How many crimes are committed each month?

Feel free to use the IPython Shell to explore the crime_data list - it has been pre-loaded for you. For example, crime_data[0][0] will show you the first column of the first row which, in this case, is the date and time time that the crime occurred.

		# Import necessary modules
		from collections import Counter
		from datetime import datetime

		# Create a Counter Object: crimes_by_month
		crimes_by_month = Counter()

		# Loop over the crime_data list
		for crime in crime_data:
			
			# Convert the first element of each item into a Python Datetime Object: date
			date = datetime.strptime(crime[0], '%m/%d/%Y %I:%M:%S %p')
			
			# Increment the counter for the month of the row by one
			crimes_by_month[date.month] += 1
			
		# Print the 3 most common months for crime
		print(crimes_by_month.most_common(3))

Exercise - Transforming your Data Containers to Month and Location

Now let's flip your crime_data list into a dictionary keyed by month with a list of location values for each month, and filter down to the records for the year 2016. Remember you can use the shell to look at the crime_data list, such as crime_data[1][4] to see the location of the crime in the second item of the list (since lists start at 0).

		# Import necessary modules
		from collections import defaultdict
		from datetime import datetime

		# Create a dictionary that defaults to a list: locations_by_month
		locations_by_month = defaultdict(list)

		# Loop over the crime_data list
		for row in crime_data:
			# Convert the first element to a date object
			date = datetime.strptime(row[0], '%m/%d/%Y %I:%M:%S %p')
			
			# If the year is 2016 
			if date.year == 2016:
				# Set the dictionary key to the month and add the location (fifth element) to the values list
				locations_by_month[date.month].append(row[4])
			
		# Print the dictionary
		print(locations_by_month)

Exercise - Find the Most Common Crimes by Location Type by Month in 2016

Using the locations_by_month dictionary from the prior exercise, you'll now determine common crimes by month and location type. Because your dataset is so large, it's a good idea to use Counter to look at an aspect of it in an easier to manageable size and learn more about it.

		# Import Counter from collections
		from collections import Counter

		# Loop over the items from locations_by_month using tuple expansion of the month and locations
		for month, locations in locations_by_month.items():
			# Make a Counter of the locations
			location_count = Counter(locations)
			# Print the month 
			print(month)
			# Print the most common location
			print(location_count.most_common(5))

Exercise - Reading your Data with DictReader and Establishing your Data Containers

Your data file, crime_sampler.csv contains in positional order: the date, block where it occurred, primary type of the crime, description of the crime, description of the location, if an arrest was made, was it a domestic case, and city district.

You'll now use a DictReader to load up a dictionary to hold your data with the district as the key and the rest of the data in a list. The csv, defaultdict, and datetime modules have already been imported for you.

		# Create the CSV file: csvfile
		csvfile = open('crime_sampler.csv', 'r')

		# Create a dictionary that defaults to a list: crimes_by_district
		crimes_by_district = defaultdict(list)

		# Loop over a DictReader of the CSV file
		for row in csv.DictReader(csvfile):
			# Pop the district from each row: district
			district = row.pop('District')
			# Append the rest of the data to the list for proper district in crimes_by_district
			crimes_by_district[district].append(row)

Exercise - Determine the Arrests by District by Year

Using your crimes_by_district dictionary from the previous exercise, you'll now determine the number arrests in each City district for each year. Counter is already imported for you. You'll want to use the IPython Shell to explore the crimes_by_district dictionary to determine how to check if an arrest was made.

		# Loop over the crimes_by_district using expansion as district and crimes
		for district, crimes in crimes_by_district.items():
			# Print the district
			print(district)
			
			# Create an empty Counter object: year_count
			year_count = Counter()
			
			# Loop over the crimes:
			for crime in crimes:
				# If there was an arrest
				if crime['Arrest'] == 'true':
					# Convert the Date to a datetime and get the year
					year = datetime.strptime(crime['Date'], '%m/%d/%Y %I:%M:%S %p').year
					# Increment the Counter for the year
					year_count[year] += 1
					
			# Print the counter
			print(year_count)

Exercise - Unique Crimes by City Block

You're in the home stretch!

Here, your data has been reshaped into a dictionary called crimes_by_block in which crimes are listed by city block. Your task in this exercise is to get a unique list of crimes that have occurred on a couple of the blocks that have been selected for you to learn more about. You might remember that you used set() to solve problems like this in Chapter 1.

Go for it!

		# Create a unique list of crimes for the first block: n_state_st_crimes
		n_state_st_crimes = set(crimes_by_block['001XX N STATE ST'])

		# Print the list
		print(n_state_st_crimes)

		# Create a unique list of crimes for the second block: w_terminal_st_crimes
		w_terminal_st_crimes = set(crimes_by_block['0000X W TERMINAL ST'])

		# Print the list
		print(w_terminal_st_crimes)

		# Find the differences between the two blocks: crime_differences
		crime_differences = n_state_st_crimes.difference(w_terminal_st_crimes)

		# Print the differences
		print(crime_differences)

			