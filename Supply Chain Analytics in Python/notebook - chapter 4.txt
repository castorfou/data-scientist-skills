Print Shadow Price
	o = [{'name':name, 'shadow price':c.pi}
	for name, c in model.constraints.items()]
		print(pd.DataFrame(o))

Constraint Slack
	Slack:
	The amount of a resource that is unused.
	o = [{'name':name, 'shadow price':c.pi, 'slack': c.slack}
	for name, c in model.constraints.items()]
		print(pd.DataFrame(o))

Simulation Testing Solution		
	a, b, c = normalvariate(0,25), normalvariate(0,25), normalvariate(0,25)
	# Define Objective Function
	model += (500+a)*A + (450+b)*B + (600+c)*C

	def run_pulp_model():
		# Initialize Class
		model = LpProblem("Max Glass Co. Profits", LpMaximize)
		A = LpVariable('A', lowBound=0)
		B = LpVariable('B', lowBound=0)
		C = LpVariable('C', lowBound=0)
		a, b, c = normalvariate(0,25), normalvariate(0,25), normalvariate(0,25)
		# Define Objective Function
		model += (500+a)*A + (450+b)*B + (600+c)*C
		# Define Constraints & Solve
		model += 6 * A + 5 * B + 8 * C <= 60
		model += 10.5 * A + 20 * B + 10 * C <= 150
		model += A <= 8
		model.solve()
		o = {'A':A.varValue, 'B':B.varValue,
		'C':C.varValue, 'Obj':value(model.objective)}
		return(o)
	output = []
	for i in range(100):
	output.append(run_pulp_model())
	df = pd.DataFrame(output)
	print(df['A'].value_counts())
	print(df['B'].value_counts())
	print(df['C'].value_counts())