PuLP Example – Resource Scheduling
	1. Initialize Class
	2. Define Variables
	3. Define Objective Function
	4. Define Constraints
	5. Solve Model

	from pulp import *
	# Initialize Class
	model = LpProblem("Maximize Bakery Profits", LpMaximize)
	# Define Decision Variables
	A = LpVariable('A', lowBound=0, cat='Integer')
	B = LpVariable('B', lowBound=0, cat='Integer')
	# Define Objective Function
	model += 20 * A + 40 * B
	# Define Constraints
	model += 0.5 * A + 1 * B <= 30
	model += 1 * A + 2.5 * B <= 60
	model += 1 * A + 2 * B <= 22
	# Solve Model
	model.solve()
	print("Produce {} Cake A".format(A.varValue))
	print("Produce {} Cake B".format(B.varValue))
	
Exercise - Simple Resource Scheduling Exercise

In this exercise you are planning the production at a glass manufacturer. This manufacturer only produces wine and beer glasses:

    there is a maximum production capacity of 60 hours
    each batch of wine and beer glasses takes 6 and 5 hours respectively
    the warehouse has a maximum capacity of 150 rack spaces
    each batch of the wine and beer glasses takes 10 and 20 spaces respectively
    the production equipment can only make full batches, no partial batches

Also, we only have orders for 6 batches of wine glasses. Therefore, we do not want to produce more than this. Each batch of the wine glasses earns a profit of $5 and the beer $4.5.

The objective is to maximize the profit for the manufacturer.

puLP has already been imported for you.

		# Initialize Class
		model = LpProblem("Maximize Glass Co. Profits", LpMaximize)

		# Define Decision Variables
		wine = LpVariable('Wine', lowBound=0, upBound=None, cat='Integer')
		beer = LpVariable('Beer', lowBound=0, upBound=None, cat='Integer')

		# Define Objective Function
		model += 5 * wine + 4.5 * beer

		# Define Constraints
		model += 6 * wine + 5 * beer <= 60
		model += 10 * wine + 20 * beer <= 150
		model += wine <= 6

		# Solve Model
		model.solve()
		print("Produce {} batches of wine glasses".format(wine.varValue))
		print("Produce {} batches of beer glasses".format(beer.varValue))

wesome job! Using LpMaximize() makes sense because we are trying to maximize profits. It does not make sense to set an upper bound on the number of wine or beer glasses produced: the more the better. However, setting a lower bound is important because producing negative glasses is impossible. Also, selecting the variable to be an integer makes sense because we can not make half batches. Adding the last constraint on wine based on current orders is important to add to avoid producing too many wine glasses.

lpSum with List Comprehension
	# Define Objective Function
	cake_types = ["A", "B", "C", "D", "E", "F"]
	profit_by_cake = {"A":20, "B":40, "C":33, "D":14, "E":6, "F":60}
	var_dict = {"A":A, "B":B, "C":C, "D":D, "E":E, "F":F}
	model += lpSum([profit_by_cake[type] * var_dict[type] for type in cake_types])
	
Exercise - Trying out lpSum

In this exercise you are making two types (premium and budget) of ice cream, using heavy cream, whole milk, and sugar. One version is a premium version containing more cream than your budget version. You are looking to find the mixture of ingredients that minimizes the total costs of ingredients.
Ingredient 	$/cup
Cream 	$1.5
Milk 	$0.125
Sugar 	$0.10

Two Python lists called prod_type and ingredient have been created for you, along with a dictionary var_dict containing the decision variables of the model. You can explore them in the console.

		# Define Objective Function
		model += lpSum([1.5 * var_dict[(i, 'cream')] 
						+ 0.125 * var_dict[(i, 'milk')] 
						+ 0.10 * var_dict[(i, 'sugar')]
						
						# Iterate over product types
						for i in prod_type])
						
Exercise - Logistics Planning Problem

You are consulting for kitchen oven manufacturer helping to plan their logistics for next month. There are two warehouse locations (New York, and Atlanta), and four regional customer locations (East, South, Midwest, West). The expected demand next month for East it is 1,800, for South it is 1,200, for the Midwest it is 1,100, and for West it is 1000. The cost for shipping each of the warehouse locations to the regional customer's is listed in the table below. Your goal is to fulfill the regional demand at the lowest price.
Customer 	New York 	Atlanta
East 	$211 	$232
South 	$232 	$212
Midwest 	$240 	$230
West 	$300 	$280

Two Python dictionaries costs and var_dict have been created for you containing the costs and decision variables of the model. You can explore them in the console.

		from pulp import *

		# Initialize Model
		model = LpProblem("Minimize Transportation Costs", LpMinimize)

		# Build the lists and the demand dictionary
		warehouse = ['New York', 'Atlanta']
		customers = ['East', 'South', 'Midwest', 'West']
		regional_demand = [1800, 1200, 1100, 1000]
		demand = dict(zip(customers, regional_demand))

		# Define Objective
		model += lpSum([costs[(w, c)] * var_dict[(w, c)] 
						for c in customers for w in warehouse])

		# For each customer, sum warehouse shipments and set equal to customer demand
		for c in customers:
			model += lpSum([var_dict[(w, c)] for w in warehouse]) == demand[c]						
			
Great job! Using LpMinimize() makes sense because we are trying to minimize shipping cost. Creating the different lists and dictionaries make it easy to define the objective function and constraints with lpSum().