LpVariable.dicts with List Comprehension

	Transportation Optimization
	# Define Decision Variables
	customers = ['East','South','Midwest','West']
	warehouse = ['New York','Atlanta']
	transport = LpVariable.dicts("route", [(w,c) for w in warehouse for c in customers], lowBound=0, cat='Integer')
	# Define Objective
	model += lpSum([cost[(w,c)]*transport[(w,c)] for w in warehouse for c in customers])

Exercise - Logistics Planning Problem 2

You are again consulting for kitchen oven manufacturer helping to plan their logistics. This time you are attempting to put together a plan for the next six months (Jan.-Jun.). There are still two warehouse locations (New York, and Atlanta), and four regional customer locations (East, South, Midwest, West). The cost for shipping for each of the warehouse locations to the regional customer's is listed in the table below. Your goal is to determine the number of shipments from each warehouse to customers that provides the lowest costs.
Customer 	New York 	Atlanta
East 	$211 	$232
South 	$232 	$212
Midwest 	$240 	$230
West 	$300 	$280

A Python dictionary named, costs containing the costs of the model, and three lists months, warehouse, and customers have been created for you. costs has been printed for you, you can explore the lists in the console as well. Additionally, the model has been initialized for you.

		# Define decision variables
		key = [(m, w, c) for m in months for w in warehouse for c in customers]
		var_dict = LpVariable.dicts('num_of_shipments', 
									key, 
									lowBound=0, cat='Integer')

		# Use the LpVariable dictionary variable to define objective
		model += lpSum([costs[(w, c)] * var_dict[(m, w, c)] 
						for m in months for w in warehouse for c in customers])
						
Marvelous work! Using LpVariable.dicts() allowed you to create 48 (6 months * 2 warehouses * 4 customers) individual decision variables for the model in a few lines of code.

Exercise - Travelling Salesman Problem (TSP)

The Traveling Salesman Problem (TSP) is a popular problem and has applications is logistics. In the TSP a salesman is given a list of cities, and the distance between each pair. He is looking for the shortest route going from the origin through all points before going back to the origin city again. This is a computationally difficult problem to solve but Miller-Tucker-Zemlin (MTZ) showed it can be completed using Integer Linear Programing. In this exercise you are going to define the objective and some constraints for of the TSP for a small dataset with 15 cities (see the image below). Your goal is to try out using LpVariable.dicts with list comprehension.

Photo of Cities

Three Python variables n, cities, and dist have been created for you 1
. The n variable is the number of cities, cities is a list of the cities numbered and dist is a pandas DataFrame with the pairwise distance between each city. You can explore them in the console. Additionally, the model has been initialized for you.

		# Define Decision Variables
		x = LpVariable.dicts('X', [(c1, c2) for c1 in cities for c2 in cities], 
							 cat='Binary')
		u = LpVariable.dicts('U', [c1 for c1 in cities], 
							 lowBound=0, upBound=(n-1), cat='Integer')

		# Define Objective
		model += lpSum([dist.iloc[c1, c2] * x[(c1, c2)] 
						for c1 in cities for c2 in cities])

		# Define Constraints
		for c2 in cities:
			model += lpSum([x[(c1, c2)] for c1 in cities]) == 1
		for c1 in cities:
			model += lpSum([x[(c1, c2)] for c2 in cities]) == 1
			
Great work! In this exercise you were able to use the combination of LpVariable.dicts(), lpSum(), and python's list comprehension to define over 200 variables. You used those variable to define the objective function and some constraints.

Exercise - Scheduling Workers Problem

You are looking to hire workers to work in a warehouse. Each worker is expected to work 5 consecutive days and then have two days off. The chart below has the estimated number of workers you will need each day. You are looking to hire the minimum number of workers to handle the workload for each day.

		# The class has been initialize, and x, days, and objective function defined
		model = LpProblem("Minimize Staffing", LpMinimize)
		days = list(range(7))
		x = LpVariable.dicts('staff_', days, lowBound=0, cat='Integer')
		model += lpSum([x[i] for i in days])

		# Define Constraints
		model += x[0] + x[3] + x[4] + x[5] + x[6] >= 31
		model += x[0] + x[1] + x[4] + x[5] + x[6] >= 45
		model += x[0] + x[1] + x[2] + x[5] + x[6] >= 40
		model += x[0] + x[1] + x[2] + x[3] + x[6] >= 40
		model += x[0] + x[1] + x[2] + x[3] + x[4] >= 48
		model += x[1] + x[2] + x[3] + x[4] + x[5] >= 30
		model += x[2] + x[3] + x[4] + x[5] + x[6] >= 25

		model.solve()
		
Exercise - Preventative Maintenance Scheduling

At a quarry they use diamond saws to cut slabs of marble. For preventative maintenance the saws are only allowed to run for 4 consecutive hours, afterwards a 1 hour inspection is completed before they are allowed to go back into service. The quarry operates 10-hour shifts. At the end of the shift if the saw blades have not been used for 4 consecutive hours the remaining time will be used at the start of the next shift. The expected number of saw blades needed for each hour is listed below. Our goal is to determine the minimum number of saw blades are needed for the shift.

Capacitated Plant Location Model
	from pulp import *
	# Initialize Class
	model = LpProblem("Capacitated Plant Location Model", LpMinimize)
	# Define Decision Variables
	loc = ['A', 'B', 'C', 'D', 'E']
	size = ['Low_Cap','High_Cap']
	x = LpVariable.dicts("production",
	[(i,j) for i in loc for j in loc],
	lowBound=0, upBound=None, cat='Continous')
	y = LpVariable.dicts("plant",
	[(i,s) for s in size for i in loc], cat='Binary')
	# Define objective function
	model += (lpSum([fix_cost.loc[i,s]*y[(i,s)] for s in size for i in loc])
	+ lpSum([var_cost.loc[i,j]*x[(i,j)] for i in loc for j in loc]))

	
Exercise - Review Data for Case Study

Assume the case study data is from a car manufacture optimizing its Supply Chain network across five regions (i.e. USA, Germany, Japan, Brazil, and India). You are given the demand, manufacturing capacity (thousands of cars) for each region, and the variable and fixed costs (thousands of $US dollars). Four Pandas DataFrames demand, var_cost, fix_cost, and cap have been created for you, and printed in the console, containing the regional demand, variable production costs, fixed production costs, and production capacity. The var_cost shows the costs of producing in location i shipping to location j. Which statement is true based on the data.

	

